{"file_contents":{"README.md":{"content":"# Sistema de Arboriza√ß√£o Urbana\n\nSistema completo de gest√£o de inspe√ß√µes de √°rvores urbanas com identifica√ß√£o de esp√©cies por IA, mapeamento interativo e gera√ß√£o de relat√≥rios para empresas de energia el√©trica.\n\n## üåü Funcionalidades Principais\n\n### üì± Interface Principal\n- **Dashboard** com estat√≠sticas em tempo real e a√ß√µes r√°pidas\n- **Navega√ß√£o responsiva** para desktop e mobile\n- **Interface em portugu√™s** otimizada para trabalho de campo\n\n### üå≥ Gest√£o de Inspe√ß√µes\n- **Formul√°rio completo** com valida√ß√£o de dados obrigat√≥rios\n- **Upload de fotos** com suporte a c√¢mera e armazenamento em nuvem\n- **Captura de GPS** autom√°tica via navegador\n- **Mapa interativo** com marcadores arrast√°veis para ajuste de posi√ß√£o\n- **Geocodifica√ß√£o reversa** autom√°tica para preenchimento de endere√ßos\n\n### ü§ñ Identifica√ß√£o por IA\n- **OpenAI Vision API (GPT-5)** para identifica√ß√£o precisa de esp√©cies\n- **M√∫ltiplos candidatos** com n√≠veis de confian√ßa detalhados\n- **Interface visual** com barras de progresso para confian√ßa\n- **Valida√ß√£o manual** e sele√ß√£o de esp√©cies alternativas\n\n### üó∫Ô∏è Mapeamento Avan√ßado\n- **Leaflet** com OpenStreetMap para visualiza√ß√£o\n- **Cluster de marcadores** para performance otimizada\n- **Filtros din√¢micos** por EA, munic√≠pio, alimentador e prioridade\n- **√çcones personalizados** diferenciados por n√≠vel de prioridade\n- **Popups informativos** com dados completos das inspe√ß√µes\n\n### üìä Relat√≥rios e Exporta√ß√£o\n- **Export CSV** com todos os campos para an√°lise\n- **Export PDF** com layout profissional e logo da empresa\n- **Export KML** para visualiza√ß√£o no Google Earth\n- **Filtros avan√ßados** para relat√≥rios customizados por per√≠odo e regi√£o\n\n### üîß Estrutura T√©cnica\n- **Hierarquia organizacional**: EA ‚Üí Munic√≠pios ‚Üí Alimentadores ‚Üí Subesta√ß√µes\n- **Valida√ß√£o rigorosa**: Regex para c√≥digos de alimentadores (XXX00)\n- **Sistema de prioridades**: Alta, M√©dia, Baixa com identifica√ß√£o visual\n- **Coordenadas precisas** com edi√ß√£o manual via mapa\n\n## üöÄ Tecnologias Utilizadas\n\n### Frontend\n- **React 18** com TypeScript para type safety\n- **Vite** para build r√°pido e HMR\n- **TailwindCSS** para estiliza√ß√£o responsiva\n- **Shadcn/ui** para componentes acess√≠veis\n- **React Hook Form** + Zod para valida√ß√£o robusta\n- **TanStack Query** para gerenciamento de estado server-side\n- **Leaflet** + React Leaflet para mapas interativos\n- **Wouter** para roteamento client-side\n\n### Backend\n- **Node.js** + Express com TypeScript\n- **Multer** para upload de arquivos local\n- **Object Storage** (Replit) para armazenamento em nuvem\n- **OpenAI API** para identifica√ß√£o de esp√©cies via IA\n- **Nominatim API** para geocodifica√ß√£o reversa\n- **In-Memory Storage** com estrutura pronta para PostgreSQL\n- **Export engines** para CSV, PDF e KML\n\n### Infraestrutura\n- **Replit** ready com configura√ß√µes otimizadas\n- **Environment variables** para chaves de API\n- **CORS** e middleware de seguran√ßa\n- **Error handling** robusto com mensagens em portugu√™s\n\n## ‚öôÔ∏è Configura√ß√£o e Instala√ß√£o\n\n### 1. Vari√°veis de Ambiente\n\nCopie o arquivo `.env.example` para `.env` e configure:\n\n```bash\ncp .env.example .env\n","size_bytes":3242},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sistema de Arboriza√ß√£o Urbana\n\n## Overview\n\nThis is a comprehensive urban tree inspection management system designed for electric utility companies in Brazil. The application combines AI-powered species identification, interactive mapping, and detailed reporting to streamline tree inspection workflows. The system supports field data collection with GPS coordinates, photo uploads, AI species identification using OpenAI Vision, and generates various export formats including CSV, PDF, and KML for integration with other tools.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern development\n- **Vite** as the build tool for fast development and optimized production builds\n- **TailwindCSS** for responsive styling with custom design system\n- **Shadcn/ui** component library for accessible, consistent UI components\n- **Leaflet + OpenStreetMap** for interactive mapping with MarkerCluster for performance\n- **React Hook Form** with Zod validation for robust form handling\n- **TanStack Query** for efficient server state management and caching\n\n### Backend Architecture\n- **Node.js + Express** with TypeScript for the REST API server\n- **Drizzle ORM** with PostgreSQL for type-safe database operations\n- **Multer** for file upload handling with local storage (prepared for S3 migration)\n- **Express sessions** for basic authentication state management\n- **Modular service architecture** with separate services for exports, AI identification, and object storage\n\n### Database Design\n- **Hierarchical structure**: EA (Advanced Stations) ‚Üí Municipalities ‚Üí Feeders ‚Üí Substations\n- **Core inspection entity** with comprehensive metadata including GPS coordinates, priority levels, and species identification results\n- **Normalized reference tables** for organizational data (EAs, municipalities, feeders, substations)\n- **Species candidate tracking** for AI identification confidence scoring\n- **PostgreSQL** with UUID primary keys and proper foreign key relationships\n\n### AI Integration\n- **OpenAI Vision API (GPT-5)** for tree species identification from uploaded photos\n- **Structured response format** returning multiple species candidates with confidence levels\n- **Base64 image encoding** for API transmission\n- **Fallback handling** for API failures and offline scenarios\n\n### File Management\n- **Local file storage** in `/uploads` directory for development\n- **Google Cloud Storage integration** prepared for production deployments\n- **Object ACL system** for fine-grained access control\n- **Image optimization** and validation for uploaded tree photos\n\n### Mapping System\n- **Leaflet integration** with custom tree icons differentiated by priority levels\n- **Marker clustering** for performance with large datasets\n- **Draggable markers** for manual coordinate adjustment\n- **Reverse geocoding** using Nominatim for automatic address population\n- **Real-time filtering** by various inspection criteria\n\n### Export Capabilities\n- **CSV export** with all inspection data fields\n- **PDF generation** with professional formatting and company branding\n- **KML export** for Google Earth integration with custom tree icons\n- **Filtering options** for customized reports by date range, location, and priority\n\n## External Dependencies\n\n### Core Services\n- **OpenAI API** - GPT-5 Vision model for tree species identification\n- **OpenStreetMap/Nominatim** - Map tiles and reverse geocoding services\n- **Google Cloud Storage** - Object storage for production file uploads (via Replit sidecar)\n\n### Development Tools\n- **Replit Environment** - Cloud-based development platform\n- **Vite Dev Server** - Hot module replacement and development tooling\n- **TypeScript Compiler** - Type checking and compilation\n\n### UI Libraries\n- **Radix UI Primitives** - Accessible component foundations\n- **Leaflet** - Interactive mapping library\n- **React Hook Form** - Form state management\n- **Zod** - Runtime type validation\n\n### Database & ORM\n- **PostgreSQL** - Primary database (Neon serverless in production)\n- **Drizzle Kit** - Database migrations and schema management\n- **Connect PG Simple** - PostgreSQL session store\n\n### File Processing\n- **Multer** - Multipart form data handling for file uploads\n- **Sharp** (prepared) - Image processing and optimization\n- **PDF generation libraries** - For report creation","size_bytes":4446},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"#E8F5E8\",\n          100: \"#C8E6C9\", \n          500: \"#2E7D32\",\n          600: \"#1B5E20\",\n          700: \"#0D4E0F\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          50: \"#E3F2FD\",\n          100: \"#BBDEFB\",\n          500: \"#1976D2\", \n          600: \"#1565C0\",\n          700: \"#0D47A1\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"JetBrains Mono\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3052},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/exportService.ts":{"content":"import { InspecaoCompleta } from \"@shared/schema\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport class ExportService {\n  \n  // Export to CSV\n  async exportToCSV(inspecoes: InspecaoCompleta[]): Promise<string> {\n    const headers = [\n      \"Data da Inspe√ß√£o\",\n      \"EA\",\n      \"Munic√≠pio\",\n      \"Alimentador\",\n      \"Subesta√ß√£o\", \n      \"Endere√ßo\",\n      \"Latitude\",\n      \"Longitude\",\n      \"Esp√©cie Final\",\n      \"Confian√ßa IA (%)\",\n      \"Prioridade\",\n      \"N√∫mero da Nota\",\n      \"N√∫mero Operativo\",\n      \"Observa√ß√µes\"\n    ];\n\n    const rows = inspecoes.map(inspecao => [\n      inspecao.dataInspecao.toLocaleDateString(\"pt-BR\"),\n      inspecao.ea.nome,\n      inspecao.municipio.nome,\n      inspecao.alimentador.codigo,\n      inspecao.subestacao.nome,\n      inspecao.endereco || \"\",\n      inspecao.latitude.toString(),\n      inspecao.longitude.toString(),\n      inspecao.especieFinal || \"\",\n      inspecao.especieConfiancaMedia ? `${inspecao.especieConfiancaMedia.toFixed(1)}%` : \"\",\n      inspecao.prioridade,\n      inspecao.numeroNota,\n      inspecao.numeroOperativo,\n      inspecao.observacoes || \"\"\n    ]);\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(cell => `\"${(cell || '').toString().replace(/\"/g, '\"\"')}\"`).join(\",\"))\n      .join(\"\\n\");\n\n    return csvContent;\n  }\n\n  // Export to KML for Google Earth - now exports individual trees instead of inspections\n  async exportToKML(inspecoes: InspecaoCompleta[]): Promise<string> {\n    // Import storage to fetch tree data\n    const { storage } = await import(\"./storage\");\n    \n    const kmlHeader = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n  <Document>\n    <name>√Årvores - Arboriza√ß√£o Urbana</name>\n    <description>Localiza√ß√£o individual das √°rvores inspecionadas</description>\n    \n    <!-- Tree Icon Style -->\n    <Style id=\"tree-icon\">\n      <IconStyle>\n        <Icon>\n          <href>https://maps.google.com/mapfiles/kml/shapes/parks.png</href>\n        </Icon>\n        <scale>1.2</scale>\n      </IconStyle>\n      <LabelStyle>\n        <scale>0.8</scale>\n      </LabelStyle>\n    </Style>\n    \n    <!-- Priority Styles -->\n    <Style id=\"alta-prioridade\">\n      <IconStyle>\n        <Icon>\n          <href>https://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png</href>\n        </Icon>\n      </IconStyle>\n    </Style>\n    \n    <Style id=\"media-prioridade\">\n      <IconStyle>\n        <Icon>\n          <href>https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png</href>\n        </Icon>\n      </IconStyle>\n    </Style>\n    \n    <Style id=\"baixa-prioridade\">\n      <IconStyle>\n        <Icon>\n          <href>https://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png</href>\n        </Icon>\n      </IconStyle>\n    </Style>\n`;\n\n    // Get all trees for each inspection and create placemarks\n    const allPlacemarks = [];\n    \n    for (const inspecao of inspecoes) {\n      const trees = await storage.getArvoresByInspecao(inspecao.id);\n      \n      for (const tree of trees) {\n        const styleId = `${inspecao.prioridade}-prioridade`;\n        const description = `\n          <![CDATA[\n            <b>Esp√©cie:</b> ${tree.especieFinal || \"N√£o identificada\"}<br/>\n            <b>EA:</b> ${inspecao.ea.nome}<br/>\n            <b>Munic√≠pio:</b> ${inspecao.municipio.nome}<br/>\n            <b>Alimentador:</b> ${inspecao.alimentador.codigo}<br/>\n            <b>Subesta√ß√£o:</b> ${inspecao.subestacao.nome}<br/>\n            <b>Endere√ßo:</b> ${tree.endereco || \"N√£o informado\"}<br/>\n            <b>Prioridade:</b> ${inspecao.prioridade}<br/>\n            <b>Data:</b> ${inspecao.dataInspecao.toLocaleDateString(\"pt-BR\")}<br/>\n            <b>N√∫mero da Nota:</b> ${inspecao.numeroNota}<br/>\n            ${tree.observacao ? `<b>Observa√ß√µes:</b> ${tree.observacao}<br/>` : \"\"}\n            ${tree.especieConfiancaMedia ? `<b>Confian√ßa IA:</b> ${tree.especieConfiancaMedia.toFixed(1)}%<br/>` : \"\"}\n          ]]>\n        `;\n\n        const placemark = `\n    <Placemark>\n      <name>${tree.especieFinal || `√Årvore - ${inspecao.numeroNota}`}</name>\n      <description>${description}</description>\n      <styleUrl>#${styleId}</styleUrl>\n      <Point>\n        <coordinates>${tree.longitude},${tree.latitude},0</coordinates>\n      </Point>\n    </Placemark>`;\n        \n        allPlacemarks.push(placemark);\n      }\n    }\n\n    const kmlFooter = `\n  </Document>\n</kml>`;\n\n    return kmlHeader + allPlacemarks.join(\"\") + kmlFooter;\n  }\n\n  // Generate simple PDF report\n  async generatePDFReport(inspecoes: InspecaoCompleta[], title: string = \"Relat√≥rio de Inspe√ß√µes\"): Promise<Buffer> {\n    // For a complete implementation, you would use a library like PDFKit or Puppeteer\n    // This is a simplified text-based version that can be enhanced\n    \n    const reportContent = `\nSISTEMA DE ARBORIZA√á√ÉO URBANA\n${title}\nData de gera√ß√£o: ${new Date().toLocaleDateString(\"pt-BR\")}\n\n===============================================\n\nRESUMO:\n- Total de inspe√ß√µes: ${inspecoes.length}\n- Alta prioridade: ${inspecoes.filter(i => i.prioridade === \"alta\").length}\n- M√©dia prioridade: ${inspecoes.filter(i => i.prioridade === \"media\").length}\n- Baixa prioridade: ${inspecoes.filter(i => i.prioridade === \"baixa\").length}\n\n===============================================\n\nDETALHES DAS INSPE√á√ïES:\n\n${inspecoes.map((inspecao, index) => `\n${index + 1}. INSPE√á√ÉO ${inspecao.numeroNota}\n   Data: ${inspecao.dataInspecao.toLocaleDateString(\"pt-BR\")}\n   EA: ${inspecao.ea.nome}\n   Munic√≠pio: ${inspecao.municipio.nome}\n   Alimentador: ${inspecao.alimentador.codigo}\n   Subesta√ß√£o: ${inspecao.subestacao.nome}\n   Localiza√ß√£o: ${inspecao.latitude}, ${inspecao.longitude}\n   Endere√ßo: ${inspecao.endereco || \"N√£o informado\"}\n   Esp√©cie: ${inspecao.especieFinal || \"N√£o identificada\"}\n   ${inspecao.especieConfiancaMedia ? `Confian√ßa IA: ${inspecao.especieConfiancaMedia.toFixed(1)}%` : \"\"}\n   Prioridade: ${inspecao.prioridade.toUpperCase()}\n   ${inspecao.observacoes ? `Observa√ß√µes: ${inspecao.observacoes}` : \"\"}\n   \n`).join(\"\")}\n\n===============================================\nRelat√≥rio gerado pelo Sistema de Arboriza√ß√£o Urbana\n`;\n\n    // Convert text to buffer (in a real implementation, use proper PDF generation)\n    return Buffer.from(reportContent, \"utf-8\");\n  }\n}\n\nexport const exportService = new ExportService();\n","size_bytes":6377},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ limit: '50mb', extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: any) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8413},"server/openaiService.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY\n});\n\nexport interface SpeciesCandidate {\n  nome: string;\n  confianca: number;\n}\n\nexport interface SpeciesIdentificationResult {\n  especie_sugerida: string;\n  candidatos: SpeciesCandidate[];\n  confianca_media: number;\n  fonte: string;\n}\n\nexport async function identifyTreeSpecies(imageBase64: string): Promise<SpeciesIdentificationResult> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n      messages: [\n        {\n          role: \"system\",\n          content: `Voc√™ √© um especialista em bot√¢nica brasileira. Analise a imagem da √°rvore e identifique a esp√©cie. \n          Retorne em JSON com:\n          - especie_sugerida: nome cient√≠fico da esp√©cie mais prov√°vel\n          - candidatos: array com at√© 5 candidatos, cada um com \"nome\" (cient√≠fico e comum) e \"confianca\" (0-100)\n          - confianca_media: confian√ßa m√©dia de todos os candidatos\n          \n          Foque em esp√©cies comuns na arboriza√ß√£o urbana brasileira como Eucalyptus, Tipuana tipu, Sibipiruna, Pau-ferro, etc.`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Identifique a esp√©cie desta √°rvore urbana brasileira. Forne√ßa o nome cient√≠fico e comum, com n√≠vel de confian√ßa.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${imageBase64}`\n              }\n            }\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Validate and format response\n    const candidatos = (result.candidatos || []).slice(0, 5).map((c: any) => ({\n      nome: c.nome || \"Desconhecido\",\n      confianca: Math.max(0, Math.min(100, c.confianca || 0))\n    }));\n\n    // Calculate average confidence from top 3 candidates\n    const top3 = candidatos.slice(0, 3);\n    const confianca_media = top3.length > 0 \n      ? Math.round(top3.reduce((acc: number, c: any) => acc + c.confianca, 0) / top3.length)\n      : 0;\n\n    const formattedResult: SpeciesIdentificationResult = {\n      especie_sugerida: result.especie_sugerida || candidatos[0]?.nome || \"Esp√©cie n√£o identificada\",\n      candidatos,\n      confianca_media,\n      fonte: \"OpenAI GPT-5\"\n    };\n\n    return formattedResult;\n  } catch (error) {\n    console.error(\"Erro na identifica√ß√£o de esp√©cie:\", error);\n    throw new Error(\"Falha ao identificar esp√©cie da √°rvore. Verifique sua conex√£o e tente novamente.\");\n  }\n}\n","size_bytes":2909},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { exportService } from \"./exportService\";\nimport { insertInspecaoSchema, insertEspecieCandidatoSchema, insertArvoreSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Setup multer for file uploads to local storage\nconst uploadsDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: uploadsDir,\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, `tree-${uniqueSuffix}${path.extname(file.originalname)}`);\n    }\n  }),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Serve uploaded files\n  app.use('/uploads', (req, res, next) => {\n    const filePath = path.join(uploadsDir, req.path);\n    if (fs.existsSync(filePath)) {\n      res.sendFile(filePath);\n    } else {\n      res.status(404).json({ error: 'Arquivo n√£o encontrado' });\n    }\n  });\n\n  // Object storage endpoint for serving private objects (for uploaded tree images)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      if ((error as any).name === \"ObjectNotFoundError\") {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Object storage upload URL endpoint\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Erro ao obter URL de upload\" });\n    }\n  });\n\n  // Reference data endpoints\n  app.get(\"/api/refs/eas\", async (req, res) => {\n    try {\n      const eas = await storage.getEas();\n      res.json(eas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar EAs\" });\n    }\n  });\n\n  app.get(\"/api/refs/municipios\", async (req, res) => {\n    try {\n      const eaId = req.query.ea_id as string;\n      const municipios = await storage.getMunicipios(eaId);\n      res.json(municipios);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar munic√≠pios\" });\n    }\n  });\n\n  app.get(\"/api/refs/alimentadores\", async (req, res) => {\n    try {\n      const alimentadores = await storage.getAlimentadores();\n      res.json(alimentadores);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar alimentadores\" });\n    }\n  });\n\n  app.get(\"/api/refs/subestacoes\", async (req, res) => {\n    try {\n      const subestacoes = await storage.getSubestacoes();\n      res.json(subestacoes);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar subesta√ß√µes\" });\n    }\n  });\n\n  // Inspections CRUD\n  app.get(\"/api/inspecoes\", async (req, res) => {\n    try {\n      const filters = {\n        eaId: req.query.ea_id as string,\n        municipioId: req.query.municipio_id as string,\n        alimentadorId: req.query.alimentador_id as string,\n        prioridade: req.query.prioridade as string,\n        dataInicio: req.query.data_inicio ? new Date(req.query.data_inicio as string) : undefined,\n        dataFim: req.query.data_fim ? new Date(req.query.data_fim as string) : undefined,\n        numeroNota: req.query.numeroNota as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : undefined,\n      };\n\n      const inspecoes = await storage.getInspecoes(filters);\n      res.json(inspecoes);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar inspe√ß√µes\" });\n    }\n  });\n\n  app.get(\"/api/inspecoes/:id\", async (req, res) => {\n    try {\n      const inspecao = await storage.getInspecao(req.params.id);\n      if (!inspecao) {\n        return res.status(404).json({ error: \"Inspe√ß√£o n√£o encontrada\" });\n      }\n      res.json(inspecao);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar inspe√ß√£o\" });\n    }\n  });\n\n  app.post(\"/api/inspecoes\", upload.single('foto'), async (req, res) => {\n    try {\n      // Parse and validate inspection data with proper number handling\n      const latitude = req.body.latitude ? parseFloat(req.body.latitude) : undefined;\n      const longitude = req.body.longitude ? parseFloat(req.body.longitude) : undefined;\n      \n      // Validate coordinates are valid numbers\n      if (!latitude || !longitude || isNaN(latitude) || isNaN(longitude)) {\n        return res.status(400).json({ error: \"Coordenadas inv√°lidas: latitude e longitude devem ser n√∫meros v√°lidos\" });\n      }\n      \n      const inspecaoData = {\n        ...req.body,\n        dataInspecao: new Date(req.body.dataInspecao),\n        latitude,\n        longitude,\n        especieConfiancaMedia: req.body.especieConfiancaMedia ? parseFloat(req.body.especieConfiancaMedia) : undefined,\n        fotoUrl: req.file ? `/uploads/${req.file.filename}` : undefined,\n      };\n\n      const validatedData = insertInspecaoSchema.parse(inspecaoData);\n      const inspecao = await storage.createInspecao(validatedData);\n\n      // Handle multiple trees if provided\n      if (req.body.items) {\n        try {\n          const items = JSON.parse(req.body.items);\n          for (const item of items) {\n            // Validate tree coordinates\n            const treeLat = typeof item.latitude === 'number' ? item.latitude : parseFloat(item.latitude);\n            const treeLng = typeof item.longitude === 'number' ? item.longitude : parseFloat(item.longitude);\n            \n            if (isNaN(treeLat) || isNaN(treeLng)) {\n              console.warn(\"√Årvore com coordenadas inv√°lidas ignorada:\", item);\n              continue;\n            }\n            \n            const arvoreData = {\n              inspecaoId: inspecao.id,\n              latitude: treeLat,\n              longitude: treeLng,\n              endereco: item.endereco,\n              observacao: item.observacao,\n              especieFinal: item.especieFinal,\n              especieConfiancaMedia: item.especieConfiancaMedia ? parseFloat(item.especieConfiancaMedia) : undefined,\n            };\n            \n            const validatedArvore = insertArvoreSchema.parse(arvoreData);\n            const arvore = await storage.createArvore(validatedArvore);\n            \n            // Create photos for this tree\n            if (item.fotos && item.fotos.length > 0) {\n              const fotosData = item.fotos.map((url: string) => ({\n                arvoreId: arvore.id,\n                url\n              }));\n              await storage.createArvoreFotos(fotosData);\n            }\n          }\n        } catch (itemsError) {\n          console.error(\"Erro ao processar √°rvores:\", itemsError);\n        }\n      }\n\n      res.status(201).json({ id: inspecao.id });\n    } catch (error) {\n      console.error(\"Erro ao criar inspe√ß√£o:\", error);\n      res.status(400).json({ error: \"Dados inv√°lidos para cria√ß√£o da inspe√ß√£o\" });\n    }\n  });\n\n  app.put(\"/api/inspecoes/:id\", upload.single('foto'), async (req, res) => {\n    try {\n      const updateData = {\n        ...req.body,\n        dataInspecao: req.body.dataInspecao ? new Date(req.body.dataInspecao) : undefined,\n        latitude: req.body.latitude ? parseFloat(req.body.latitude) : undefined,\n        longitude: req.body.longitude ? parseFloat(req.body.longitude) : undefined,\n        especieConfiancaMedia: req.body.especieConfiancaMedia ? parseFloat(req.body.especieConfiancaMedia) : undefined,\n      };\n\n      if (req.file) {\n        updateData.fotoUrl = `/uploads/${req.file.filename}`;\n      }\n\n      // Remove undefined values\n      Object.keys(updateData).forEach(key => \n        updateData[key] === undefined && delete updateData[key]\n      );\n\n      const inspecao = await storage.updateInspecao(req.params.id, updateData);\n      res.json(inspecao);\n    } catch (error) {\n      console.error(\"Erro ao atualizar inspe√ß√£o:\", error);\n      res.status(400).json({ error: \"Erro ao atualizar inspe√ß√£o\" });\n    }\n  });\n\n  app.delete(\"/api/inspecoes/:id\", async (req, res) => {\n    try {\n      await storage.deleteInspecao(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao excluir inspe√ß√£o\" });\n    }\n  });\n\n  // AI species identification\n  // PlantNet API route - replaced by dedicated ia routes\n  app.post(\"/api/ia/identificar-especie\", async (req, res) => {\n    try {\n      const { imageUrl, organs = [\"leaf\",\"flower\",\"fruit\",\"bark\",\"habit\"], lang = \"pt\" } = req.body || {};\n      if (!imageUrl) return res.status(400).json({ error: \"imageUrl √© obrigat√≥ria\" });\n      if (!process.env.PLANTNET_API_KEY) return res.status(500).json({ error: \"PLANTNET_API_KEY n√£o configurada\" });\n\n      // Montar chamada √† Pl@ntNet\n      const params = new URLSearchParams();\n      params.append(\"api-key\", process.env.PLANTNET_API_KEY as string);\n      params.append(\"images\", imageUrl);\n      // m√∫ltiplos √≥rg√£os ajudam a precis√£o; envie todos os selecionados\n      organs.forEach((o: string) => params.append(\"organs\", o));\n      params.append(\"lang\", lang);\n      params.append(\"include-related-images\", \"false\");\n      params.append(\"no-reject\", \"false\");\n\n      const url = `https://my-api.plantnet.org/v2/identify/all?${params.toString()}`;\n      const axios = await import('axios');\n      const { data } = await axios.default.get(url, { timeout: 20000 });\n\n      const candidatos = (data?.results || []).map((r: any) => ({\n        nome: r?.species?.scientificName || r?.species?.scientificNameWithoutAuthor || \"Desconhecido\",\n        confianca: Math.round((r?.score || 0) * 100),\n      }));\n\n      // calcular confian√ßa m√©dia s√≥ dos top 5\n      const top = candidatos.slice(0, 5);\n      const confianca_media = top.length\n        ? Math.round(top.reduce((acc: number, c: any) => acc + (c.confianca || 0), 0) / top.length)\n        : 0;\n\n      // N√ÉO salvamos direto; devolvemos para o front decidir/confirmar\n      return res.json({\n        especie_sugerida: candidatos[0]?.nome || \"Esp√©cie n√£o identificada\",\n        candidatos,\n        confianca_media,\n        fonte: \"Pl@ntNet\",\n      });\n    } catch (e: any) {\n      const detail = e?.response?.data || e?.message || \"Erro desconhecido\";\n      const status = e?.response?.status || 500;\n      console.error(\"Erro na identifica√ß√£o Pl@ntNet:\", { error: e, detail, status });\n      return res.status(status).json({ error: \"Falha na identifica√ß√£o (Pl@ntNet)\", detail });\n    }\n  });\n\n  // Simple image upload for species identification\n  app.post(\"/api/upload\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"Nenhum arquivo enviado\" });\n      }\n      \n      // Return the URL that can be accessed by PlantNet\n      const serverUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;\n      res.json({ url: serverUrl });\n    } catch (error) {\n      console.error(\"Erro no upload:\", error);\n      res.status(500).json({ error: \"Erro ao fazer upload da imagem\" });\n    }\n  });\n\n  // Object storage based species identification (for cloud storage)\n\n  // Save uploaded tree image with ACL policy\n  app.put(\"/api/tree-images\", async (req, res) => {\n    try {\n      const { imageUrl, inspecaoId } = req.body;\n      if (!imageUrl) {\n        return res.status(400).json({ error: \"URL da imagem √© obrigat√≥ria\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(imageUrl);\n\n      // Set ACL policy for public access (tree images can be viewed by anyone)\n      await objectStorageService.trySetObjectEntityAclPolicy(imageUrl, {\n        owner: \"system\", // System-owned as these are inspection photos\n        visibility: \"public\", // Public visibility for tree inspection photos\n      });\n\n      res.json({ objectPath });\n    } catch (error) {\n      console.error(\"Erro ao salvar imagem da √°rvore:\", error);\n      res.status(500).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Species candidates management\n  app.post(\"/api/inspecoes/:id/candidatos\", async (req, res) => {\n    try {\n      const candidatos = req.body.candidatos.map((c: any) => ({\n        ...c,\n        inspecaoId: req.params.id\n      }));\n\n      const validatedCandidatos = candidatos.map((c: any) => \n        insertEspecieCandidatoSchema.parse(c)\n      );\n\n      // Delete existing candidates first\n      await storage.deleteEspecieCandidatos(req.params.id);\n      \n      // Create new candidates\n      const newCandidatos = await storage.createEspecieCandidatos(validatedCandidatos);\n      res.json(newCandidatos);\n    } catch (error) {\n      console.error(\"Erro ao salvar candidatos:\", error);\n      res.status(400).json({ error: \"Erro ao salvar candidatos de esp√©cie\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const filters = {\n        eaId: req.query.ea_id as string,\n        municipioId: req.query.municipio_id as string\n      };\n      const stats = await storage.getDashboardStats(filters);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar estat√≠sticas\" });\n    }\n  });\n\n  // √Årvores routes\n  app.get(\"/api/arvores\", async (req, res) => {\n    try {\n      const arvores = await storage.getAllArvores();\n      res.json(arvores);\n    } catch (error) {\n      console.error(\"Erro ao buscar √°rvores:\", error);\n      res.status(500).json({ error: \"Erro ao buscar √°rvores\" });\n    }\n  });\n\n  app.get(\"/api/inspecoes/:id/arvores\", async (req, res) => {\n    try {\n      const arvores = await storage.getArvoresByInspecao(req.params.id);\n      res.json(arvores);\n    } catch (error) {\n      console.error(\"Erro ao buscar √°rvores:\", error);\n      res.status(500).json({ error: \"Erro ao buscar √°rvores\" });\n    }\n  });\n\n  app.post(\"/api/inspecoes/:id/arvores\", async (req, res) => {\n    try {\n      const arvoreData = { ...req.body, inspecaoId: req.params.id };\n      const validatedArvore = insertArvoreSchema.parse(arvoreData);\n      const arvore = await storage.createArvore(validatedArvore);\n      \n      // Create photos if provided\n      if (req.body.fotos && req.body.fotos.length > 0) {\n        const fotosData = req.body.fotos.map((url: string) => ({\n          arvoreId: arvore.id,\n          url\n        }));\n        await storage.createArvoreFotos(fotosData);\n      }\n      \n      res.json(arvore);\n    } catch (error) {\n      console.error(\"Erro ao criar √°rvore:\", error);\n      res.status(400).json({ error: \"Erro ao criar √°rvore\" });\n    }\n  });\n\n  app.put(\"/api/inspecoes/:id/arvores/:arvoreId\", async (req, res) => {\n    try {\n      // Parse and validate coordinates if provided\n      const updateData = { ...req.body };\n      \n      if (updateData.latitude !== undefined) {\n        const lat = parseFloat(updateData.latitude);\n        if (isNaN(lat)) {\n          return res.status(400).json({ error: \"Latitude inv√°lida\" });\n        }\n        updateData.latitude = lat;\n      }\n      \n      if (updateData.longitude !== undefined) {\n        const lng = parseFloat(updateData.longitude);\n        if (isNaN(lng)) {\n          return res.status(400).json({ error: \"Longitude inv√°lida\" });\n        }\n        updateData.longitude = lng;\n      }\n      \n      if (updateData.especieConfiancaMedia !== undefined && updateData.especieConfiancaMedia !== null) {\n        const conf = parseFloat(updateData.especieConfiancaMedia);\n        updateData.especieConfiancaMedia = isNaN(conf) ? undefined : conf;\n      }\n      \n      const validatedArvore = insertArvoreSchema.partial().parse(updateData);\n      const arvore = await storage.updateArvore(req.params.arvoreId, validatedArvore);\n      res.json(arvore);\n    } catch (error) {\n      console.error(\"Erro ao atualizar √°rvore:\", error);\n      res.status(400).json({ error: \"Erro ao atualizar √°rvore\" });\n    }\n  });\n\n  app.delete(\"/api/inspecoes/:id/arvores/:arvoreId\", async (req, res) => {\n    try {\n      await storage.deleteArvore(req.params.arvoreId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Erro ao deletar √°rvore:\", error);\n      res.status(500).json({ error: \"Erro ao deletar √°rvore\" });\n    }\n  });\n\n  app.post(\"/api/arvores/:arvoreId/fotos\", async (req, res) => {\n    try {\n      const { urls } = req.body;\n      const fotosData = urls.map((url: string) => ({\n        arvoreId: req.params.arvoreId,\n        url\n      }));\n      const fotos = await storage.createArvoreFotos(fotosData);\n      res.json(fotos);\n    } catch (error) {\n      console.error(\"Erro ao adicionar fotos:\", error);\n      res.status(400).json({ error: \"Erro ao adicionar fotos\" });\n    }\n  });\n\n  app.delete(\"/api/arvores/:arvoreId/fotos/:fotoId\", async (req, res) => {\n    try {\n      await storage.deleteArvoreFoto(req.params.fotoId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Erro ao deletar foto:\", error);\n      res.status(500).json({ error: \"Erro ao deletar foto\" });\n    }\n  });\n\n  // Export endpoints\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const filters = {\n        eaId: req.query.ea_id as string,\n        municipioId: req.query.municipio_id as string,\n        alimentadorId: req.query.alimentador_id as string,\n        prioridade: req.query.prioridade as string,\n        dataInicio: req.query.data_inicio ? new Date(req.query.data_inicio as string) : undefined,\n        dataFim: req.query.data_fim ? new Date(req.query.data_fim as string) : undefined,\n      };\n\n      const inspecoes = await storage.getInspecoes(filters);\n      const csvContent = await exportService.exportToCSV(inspecoes);\n\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"inspecoes.csv\"');\n      res.send('\\ufeff' + csvContent); // Add BOM for UTF-8\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao exportar CSV\" });\n    }\n  });\n\n  app.get(\"/api/export/kml\", async (req, res) => {\n    try {\n      const filters = {\n        eaId: req.query.ea_id as string,\n        municipioId: req.query.municipio_id as string,\n        alimentadorId: req.query.alimentador_id as string,\n        prioridade: req.query.prioridade as string,\n        dataInicio: req.query.data_inicio ? new Date(req.query.data_inicio as string) : undefined,\n        dataFim: req.query.data_fim ? new Date(req.query.data_fim as string) : undefined,\n      };\n\n      const inspecoes = await storage.getInspecoes(filters);\n      const kmlContent = await exportService.exportToKML(inspecoes);\n\n      res.setHeader('Content-Type', 'application/vnd.google-earth.kml+xml');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"inspecoes.kml\"');\n      res.send(kmlContent);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao exportar KML\" });\n    }\n  });\n\n  app.get(\"/api/export/pdf\", async (req, res) => {\n    try {\n      const filters = {\n        eaId: req.query.ea_id as string,\n        municipioId: req.query.municipio_id as string,\n        alimentadorId: req.query.alimentador_id as string,\n        prioridade: req.query.prioridade as string,\n        dataInicio: req.query.data_inicio ? new Date(req.query.data_inicio as string) : undefined,\n        dataFim: req.query.data_fim ? new Date(req.query.data_fim as string) : undefined,\n      };\n\n      const inspecoes = await storage.getInspecoes(filters);\n      const pdfBuffer = await exportService.generatePDFReport(inspecoes);\n\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"relatorio-inspecoes.pdf\"');\n      res.send(pdfBuffer);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao gerar PDF\" });\n    }\n  });\n\n  // Reverse geocoding proxy (using Nominatim)\n  app.get(\"/api/geocoding/reverse\", async (req, res) => {\n    try {\n      const { lat, lng } = req.query;\n      if (!lat || !lng) {\n        return res.status(400).json({ error: \"Latitude e longitude s√£o obrigat√≥rias\" });\n      }\n\n      const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=pt-BR`;\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'Sistema-Arborizacao-Urbana/1.0'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro na consulta de geocodifica√ß√£o');\n      }\n\n      const data = await response.json();\n      \n      let endereco = \"Endere√ßo n√£o encontrado\";\n      if (data.display_name) {\n        const parts = data.display_name.split(', ');\n        const street = parts[0] || \"\";\n        const neighborhood = parts[1] || \"\";\n        const city = parts[2] || \"\";\n        const state = parts[parts.length - 2] || \"\";\n        \n        endereco = `${street}${neighborhood ? `, ${neighborhood}` : \"\"} - ${city}/${state}`.trim();\n      }\n\n      res.json({ endereco });\n    } catch (error) {\n      console.error(\"Erro no geocoding reverso:\", error);\n      res.status(500).json({ error: \"Erro ao obter endere√ßo\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22070},"server/storage.ts":{"content":"import { \n  type Ea, type InsertEa,\n  type Municipio, type InsertMunicipio,\n  type Subestacao, type InsertSubestacao,\n  type Alimentador, type InsertAlimentador,\n  type Inspecao, type InsertInspecao, type InspecaoCompleta,\n  type EspecieCandidato, type InsertEspecieCandidato,\n  type Arvore, type InsertArvore, type ArvoreCompleta,\n  type ArvoreFoto, type InsertArvoreFoto,\n  eas, municipios, subestacoes, alimentadores, inspecoes, especieCandidatos, arvores, arvoreFotos\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // EAs\n  getEas(): Promise<Ea[]>;\n  createEa(ea: InsertEa): Promise<Ea>;\n\n  // Munic√≠pios\n  getMunicipios(eaId?: string): Promise<Municipio[]>;\n  createMunicipio(municipio: InsertMunicipio): Promise<Municipio>;\n\n  // Subesta√ß√µes\n  getSubestacoes(): Promise<Subestacao[]>;\n  createSubestacao(subestacao: InsertSubestacao): Promise<Subestacao>;\n\n  // Alimentadores\n  getAlimentadores(): Promise<Alimentador[]>;\n  createAlimentador(alimentador: InsertAlimentador): Promise<Alimentador>;\n\n  // Inspe√ß√µes\n  getInspecoes(filters?: {\n    eaId?: string;\n    municipioId?: string;\n    alimentadorId?: string;\n    prioridade?: string;\n    dataInicio?: Date;\n    dataFim?: Date;\n    numeroNota?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<InspecaoCompleta[]>;\n  getInspecao(id: string): Promise<InspecaoCompleta | undefined>;\n  createInspecao(inspecao: InsertInspecao): Promise<Inspecao>;\n  updateInspecao(id: string, inspecao: Partial<InsertInspecao>): Promise<Inspecao>;\n  deleteInspecao(id: string): Promise<void>;\n\n  // Candidatos de esp√©cie\n  getEspecieCandidatos(inspecaoId: string): Promise<EspecieCandidato[]>;\n  createEspecieCandidatos(candidatos: InsertEspecieCandidato[]): Promise<EspecieCandidato[]>;\n  deleteEspecieCandidatos(inspecaoId: string): Promise<void>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<{\n    totalInspections: number;\n    highPriority: number;\n    mediumPriority: number;\n    lowPriority: number;\n    byMunicipality: { municipio: string; count: number }[];\n  }>;\n\n  // √Årvores\n  getAllArvores(): Promise<any[]>;\n  getArvoresByInspecao(inspecaoId: string): Promise<ArvoreCompleta[]>;\n  createArvore(arvore: InsertArvore): Promise<Arvore>;\n  updateArvore(id: string, arvore: Partial<InsertArvore>): Promise<Arvore>;\n  deleteArvore(id: string): Promise<void>;\n\n  // Fotos de √°rvores\n  getFotosByArvore(arvoreId: string): Promise<ArvoreFoto[]>;\n  createArvoreFotos(fotos: InsertArvoreFoto[]): Promise<ArvoreFoto[]>;\n  deleteArvoreFoto(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // EAs\n  async getEas(): Promise<Ea[]> {\n    return await db.select().from(eas);\n  }\n\n  async createEa(ea: InsertEa): Promise<Ea> {\n    const [newEa] = await db.insert(eas).values(ea).returning();\n    return newEa;\n  }\n\n  // Munic√≠pios\n  async getMunicipios(eaId?: string): Promise<Municipio[]> {\n    if (eaId) {\n      return await db.select().from(municipios).where(eq(municipios.eaId, eaId));\n    }\n    return await db.select().from(municipios);\n  }\n\n  async createMunicipio(municipio: InsertMunicipio): Promise<Municipio> {\n    const [newMunicipio] = await db.insert(municipios).values(municipio).returning();\n    return newMunicipio;\n  }\n\n  // Subesta√ß√µes\n  async getSubestacoes(): Promise<Subestacao[]> {\n    return await db.select().from(subestacoes);\n  }\n\n  async createSubestacao(subestacao: InsertSubestacao): Promise<Subestacao> {\n    const [newSubestacao] = await db.insert(subestacoes).values(subestacao).returning();\n    return newSubestacao;\n  }\n\n  // Alimentadores\n  async getAlimentadores(): Promise<Alimentador[]> {\n    return await db.select().from(alimentadores);\n  }\n\n  async createAlimentador(alimentador: InsertAlimentador): Promise<Alimentador> {\n    const [newAlimentador] = await db.insert(alimentadores).values(alimentador).returning();\n    return newAlimentador;\n  }\n\n  // Inspe√ß√µes\n  async getInspecoes(filters?: {\n    eaId?: string;\n    municipioId?: string;\n    alimentadorId?: string;\n    prioridade?: string;\n    dataInicio?: Date;\n    dataFim?: Date;\n    numeroNota?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<InspecaoCompleta[]> {\n    const conditions = [];\n    if (filters?.eaId) conditions.push(eq(inspecoes.eaId, filters.eaId));\n    if (filters?.municipioId) conditions.push(eq(inspecoes.municipioId, filters.municipioId));\n    if (filters?.alimentadorId) conditions.push(eq(inspecoes.alimentadorId, filters.alimentadorId));\n    if (filters?.prioridade) conditions.push(eq(inspecoes.prioridade, filters.prioridade));\n    if (filters?.dataInicio) conditions.push(gte(inspecoes.dataInspecao, filters.dataInicio));\n    if (filters?.dataFim) conditions.push(lte(inspecoes.dataInspecao, filters.dataFim));\n    if (filters?.numeroNota) conditions.push(sql`${inspecoes.numeroNota} ILIKE ${'%' + filters.numeroNota + '%'}`);\n\n    let queryBuilder = db\n      .select({\n        inspecao: inspecoes,\n        ea: eas,\n        municipio: municipios,\n        alimentador: alimentadores,\n        subestacao: subestacoes,\n        totalArvores: sql<number>`(\n          SELECT COUNT(*)::int \n          FROM ${arvores} \n          WHERE ${arvores.inspecaoId} = ${inspecoes.id}\n        )`.as('total_arvores'),\n        primeiraEspecie: sql<string>`(\n          SELECT ${arvores.especieFinal}\n          FROM ${arvores} \n          WHERE ${arvores.inspecaoId} = ${inspecoes.id} \n          AND ${arvores.especieFinal} IS NOT NULL \n          AND ${arvores.especieFinal} != ''\n          LIMIT 1\n        )`.as('primeira_especie'),\n        especieConfianca: sql<number>`(\n          SELECT ${arvores.especieConfiancaMedia}\n          FROM ${arvores} \n          WHERE ${arvores.inspecaoId} = ${inspecoes.id} \n          AND ${arvores.especieFinal} IS NOT NULL \n          AND ${arvores.especieFinal} != ''\n          LIMIT 1\n        )`.as('especie_confianca'),\n      })\n      .from(inspecoes)\n      .leftJoin(eas, eq(inspecoes.eaId, eas.id))\n      .leftJoin(municipios, eq(inspecoes.municipioId, municipios.id))\n      .leftJoin(alimentadores, eq(inspecoes.alimentadorId, alimentadores.id))\n      .leftJoin(subestacoes, eq(inspecoes.subestacaoId, subestacoes.id))\n      .$dynamic();\n\n    if (conditions.length > 0) {\n      queryBuilder = queryBuilder.where(and(...conditions));\n    }\n\n    queryBuilder = queryBuilder.orderBy(desc(inspecoes.createdAt));\n\n    if (filters?.offset) {\n      queryBuilder = queryBuilder.offset(filters.offset);\n    }\n    if (filters?.limit) {\n      queryBuilder = queryBuilder.limit(filters.limit);\n    }\n\n    const results = await queryBuilder;\n\n    // Get candidates for each inspection\n    const inspecoesWithCandidatos = await Promise.all(\n      results.map(async (row) => {\n        const candidatos = await this.getEspecieCandidatos(row.inspecao.id);\n        return {\n          ...row.inspecao,\n          // Override inspection species with tree species if available\n          especieFinal: row.primeiraEspecie || row.inspecao.especieFinal,\n          especieConfiancaMedia: row.especieConfianca || row.inspecao.especieConfiancaMedia,\n          ea: row.ea!,\n          municipio: row.municipio!,\n          alimentador: row.alimentador!,\n          subestacao: row.subestacao!,\n          candidatos,\n          totalArvores: row.totalArvores,\n        };\n      })\n    );\n\n    return inspecoesWithCandidatos;\n  }\n\n  async getInspecao(id: string): Promise<InspecaoCompleta | undefined> {\n    const result = await db\n      .select({\n        inspecao: inspecoes,\n        ea: eas,\n        municipio: municipios,\n        alimentador: alimentadores,\n        subestacao: subestacoes,\n      })\n      .from(inspecoes)\n      .leftJoin(eas, eq(inspecoes.eaId, eas.id))\n      .leftJoin(municipios, eq(inspecoes.municipioId, municipios.id))\n      .leftJoin(alimentadores, eq(inspecoes.alimentadorId, alimentadores.id))\n      .leftJoin(subestacoes, eq(inspecoes.subestacaoId, subestacoes.id))\n      .where(eq(inspecoes.id, id))\n      .limit(1);\n\n    if (result.length === 0) return undefined;\n\n    const row = result[0];\n    const candidatos = await this.getEspecieCandidatos(id);\n\n    return {\n      ...row.inspecao,\n      ea: row.ea!,\n      municipio: row.municipio!,\n      alimentador: row.alimentador!,\n      subestacao: row.subestacao!,\n      candidatos,\n    };\n  }\n\n  async createInspecao(inspecao: InsertInspecao): Promise<Inspecao> {\n    const [newInspecao] = await db.insert(inspecoes).values(inspecao).returning();\n    return newInspecao;\n  }\n\n  async updateInspecao(id: string, inspecao: Partial<InsertInspecao>): Promise<Inspecao> {\n    const [updated] = await db\n      .update(inspecoes)\n      .set({ ...inspecao, updatedAt: new Date() })\n      .where(eq(inspecoes.id, id))\n      .returning();\n\n    if (!updated) throw new Error(\"Inspe√ß√£o n√£o encontrada\");\n    return updated;\n  }\n\n  async deleteInspecao(id: string): Promise<void> {\n    // First get all trees for this inspection\n    const treesForInspection = await db\n      .select({ id: arvores.id })\n      .from(arvores)\n      .where(eq(arvores.inspecaoId, id));\n\n    // Delete all tree photos for these trees\n    for (const tree of treesForInspection) {\n      await db.delete(arvoreFotos).where(eq(arvoreFotos.arvoreId, tree.id));\n    }\n\n    // Delete all trees for this inspection\n    await db.delete(arvores).where(eq(arvores.inspecaoId, id));\n\n    // Delete related species candidates\n    await this.deleteEspecieCandidatos(id);\n    \n    // Finally delete the inspection\n    await db.delete(inspecoes).where(eq(inspecoes.id, id));\n  }\n\n  // Candidatos de esp√©cie\n  async getEspecieCandidatos(inspecaoId: string): Promise<EspecieCandidato[]> {\n    return await db\n      .select()\n      .from(especieCandidatos)\n      .where(eq(especieCandidatos.inspecaoId, inspecaoId));\n  }\n\n  async createEspecieCandidatos(candidatos: InsertEspecieCandidato[]): Promise<EspecieCandidato[]> {\n    if (candidatos.length === 0) return [];\n    return await db.insert(especieCandidatos).values(candidatos).returning();\n  }\n\n  async deleteEspecieCandidatos(inspecaoId: string): Promise<void> {\n    await db.delete(especieCandidatos).where(eq(especieCandidatos.inspecaoId, inspecaoId));\n  }\n\n  // Dashboard stats\n  async getDashboardStats(filters?: { eaId?: string; municipioId?: string }): Promise<{\n    totalInspections: number;\n    highPriority: number;\n    mediumPriority: number;\n    lowPriority: number;\n    byMunicipality: { municipio: string; count: number }[];\n  }> {\n    // Build where conditions based on filters\n    const whereConditions = [];\n    if (filters?.eaId) {\n      whereConditions.push(eq(inspecoes.eaId, filters.eaId));\n    }\n    if (filters?.municipioId) {\n      whereConditions.push(eq(inspecoes.municipioId, filters.municipioId));\n    }\n\n    const totalInspections = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(inspecoes)\n      .where(whereConditions.length > 0 ? and(...whereConditions) : undefined);\n\n    const priorityCounts = await db\n      .select({ \n        prioridade: inspecoes.prioridade, \n        count: sql<number>`count(*)` \n      })\n      .from(inspecoes)\n      .where(whereConditions.length > 0 ? and(...whereConditions) : undefined)\n      .groupBy(inspecoes.prioridade);\n\n    const municipalityCounts = await db\n      .select({\n        municipio: municipios.nome,\n        count: sql<number>`count(*)`\n      })\n      .from(inspecoes)\n      .leftJoin(municipios, eq(inspecoes.municipioId, municipios.id))\n      .where(whereConditions.length > 0 ? and(...whereConditions) : undefined)\n      .groupBy(municipios.nome)\n      .orderBy(desc(sql`count(*)`));\n\n    const priorityMap = priorityCounts.reduce((acc, { prioridade, count }) => {\n      acc[prioridade] = count;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      totalInspections: totalInspections[0]?.count || 0,\n      highPriority: priorityMap.alta || 0,\n      mediumPriority: priorityMap.media || 0,\n      lowPriority: priorityMap.baixa || 0,\n      byMunicipality: municipalityCounts.map(({ municipio, count }) => ({\n        municipio: municipio || \"Desconhecido\",\n        count\n      }))\n    };\n  }\n\n  // √Årvores\n  async getAllArvores(): Promise<any[]> {\n    const trees = await db.select().from(arvores);\n    \n    const treesWithInspectionInfo = await Promise.all(\n      trees.map(async (tree) => {\n        // Get inspection details\n        const [inspecao] = await db\n          .select()\n          .from(inspecoes)\n          .leftJoin(eas, eq(inspecoes.eaId, eas.id))\n          .leftJoin(municipios, eq(inspecoes.municipioId, municipios.id))\n          .leftJoin(alimentadores, eq(inspecoes.alimentadorId, alimentadores.id))\n          .where(eq(inspecoes.id, tree.inspecaoId));\n        \n        // Get photos\n        const fotos = await this.getFotosByArvore(tree.id);\n        \n        return {\n          ...tree,\n          inspecao: inspecao?.inspecoes,\n          ea: inspecao?.eas,\n          municipio: inspecao?.municipios,\n          alimentador: inspecao?.alimentadores,\n          fotos\n        };\n      })\n    );\n\n    return treesWithInspectionInfo;\n  }\n\n  async getArvoresByInspecao(inspecaoId: string): Promise<ArvoreCompleta[]> {\n    const trees = await db.select().from(arvores).where(eq(arvores.inspecaoId, inspecaoId));\n    \n    const treesWithPhotos = await Promise.all(\n      trees.map(async (tree) => {\n        const fotos = await this.getFotosByArvore(tree.id);\n        return {\n          ...tree,\n          fotos\n        };\n      })\n    );\n\n    return treesWithPhotos;\n  }\n\n  async createArvore(arvore: InsertArvore): Promise<Arvore> {\n    const [newArvore] = await db.insert(arvores).values(arvore).returning();\n    return newArvore;\n  }\n\n  async updateArvore(id: string, arvore: Partial<InsertArvore>): Promise<Arvore> {\n    const [updated] = await db\n      .update(arvores)\n      .set(arvore)\n      .where(eq(arvores.id, id))\n      .returning();\n\n    if (!updated) throw new Error(\"√Årvore n√£o encontrada\");\n    return updated;\n  }\n\n  async deleteArvore(id: string): Promise<void> {\n    // Delete photos first\n    await db.delete(arvoreFotos).where(eq(arvoreFotos.arvoreId, id));\n    // Delete the tree\n    await db.delete(arvores).where(eq(arvores.id, id));\n  }\n\n  // Fotos de √°rvores\n  async getFotosByArvore(arvoreId: string): Promise<ArvoreFoto[]> {\n    return await db\n      .select()\n      .from(arvoreFotos)\n      .where(eq(arvoreFotos.arvoreId, arvoreId));\n  }\n\n  async createArvoreFotos(fotos: InsertArvoreFoto[]): Promise<ArvoreFoto[]> {\n    if (fotos.length === 0) return [];\n    return await db.insert(arvoreFotos).values(fotos).returning();\n  }\n\n  async deleteArvoreFoto(id: string): Promise<void> {\n    await db.delete(arvoreFotos).where(eq(arvoreFotos.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14915},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, real, integer, boolean, doublePrecision, numeric } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// EA (Esta√ß√£o Avan√ßada) table\nexport const eas = pgTable(\"eas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nome: text(\"nome\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Municipalities table\nexport const municipios = pgTable(\"municipios\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nome: text(\"nome\").notNull(),\n  uf: text(\"uf\").notNull().default(\"SP\"),\n  eaId: varchar(\"ea_id\").references(() => eas.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Substations table\nexport const subestacoes = pgTable(\"subestacoes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nome: text(\"nome\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Feeders table\nexport const alimentadores = pgTable(\"alimentadores\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  codigo: text(\"codigo\").notNull().unique(), // ITU01, PGO10, etc.\n  subestacaoId: varchar(\"subestacao_id\").references(() => subestacoes.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Main inspections table\nexport const inspecoes = pgTable(\"inspecoes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  numeroNota: text(\"numero_nota\").notNull(),\n  numeroOperativo: text(\"numero_operativo\"),\n  dataInspecao: timestamp(\"data_inspecao\").notNull(),\n  eaId: varchar(\"ea_id\").references(() => eas.id).notNull(),\n  municipioId: varchar(\"municipio_id\").references(() => municipios.id).notNull(),\n  alimentadorId: varchar(\"alimentador_id\").references(() => alimentadores.id).notNull(),\n  subestacaoId: varchar(\"subestacao_id\").references(() => subestacoes.id).notNull(),\n  latitude: doublePrecision(\"latitude\").notNull(),\n  longitude: doublePrecision(\"longitude\").notNull(),\n  endereco: text(\"endereco\"),\n  prioridade: text(\"prioridade\").notNull(), // baixa, media, alta\n  observacoes: text(\"observacoes\"),\n  especieFinal: text(\"especie_final\"),\n  especieConfiancaMedia: doublePrecision(\"especie_confianca_media\"),\n  fotoUrl: text(\"foto_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Species candidates from AI\nexport const especieCandidatos = pgTable(\"especie_candidatos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inspecaoId: varchar(\"inspecao_id\").references(() => inspecoes.id).notNull(),\n  nome: text(\"nome\").notNull(),\n  confianca: doublePrecision(\"confianca\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Arvores table - multiple trees per inspection\nexport const arvores = pgTable(\"arvores\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inspecaoId: varchar(\"inspecao_id\").references(() => inspecoes.id).notNull(),\n  latitude: doublePrecision(\"latitude\").notNull(),\n  longitude: doublePrecision(\"longitude\").notNull(),\n  endereco: text(\"endereco\"),\n  observacao: text(\"observacao\"),\n  especieFinal: text(\"especie_final\"),\n  especieConfiancaMedia: doublePrecision(\"especie_confianca_media\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tree photos table - multiple photos per tree\nexport const arvoreFotos = pgTable(\"arvore_fotos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  arvoreId: varchar(\"arvore_id\").references(() => arvores.id).notNull(),\n  url: text(\"url\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n});\n\n// Insert schemas\nexport const insertEaSchema = createInsertSchema(eas).pick({\n  nome: true,\n});\n\nexport const insertMunicipioSchema = createInsertSchema(municipios).pick({\n  nome: true,\n  uf: true,\n  eaId: true,\n});\n\nexport const insertSubestacaoSchema = createInsertSchema(subestacoes).pick({\n  nome: true,\n});\n\nexport const insertAlimentadorSchema = createInsertSchema(alimentadores).pick({\n  codigo: true,\n  subestacaoId: true,\n}).extend({\n  codigo: z.string().regex(/^[A-Z]{3}\\d{2}$/, \"C√≥digo deve ter 3 letras mai√∫sculas + 2 n√∫meros\"),\n});\n\nexport const insertInspecaoSchema = createInsertSchema(inspecoes).pick({\n  numeroNota: true,\n  numeroOperativo: true,\n  dataInspecao: true,\n  eaId: true,\n  municipioId: true,\n  alimentadorId: true,\n  subestacaoId: true,\n  latitude: true,\n  longitude: true,\n  endereco: true,\n  prioridade: true,\n  observacoes: true,\n  especieFinal: true,\n  especieConfiancaMedia: true,\n  fotoUrl: true,\n}).extend({\n  prioridade: z.enum([\"baixa\", \"media\", \"alta\"]),\n  latitude: z.number().min(-90).max(90),\n  longitude: z.number().min(-180).max(180),\n  numeroOperativo: z.string().optional(),\n});\n\nexport const insertEspecieCandidatoSchema = createInsertSchema(especieCandidatos).pick({\n  inspecaoId: true,\n  nome: true,\n  confianca: true,\n});\n\nexport const insertArvoreSchema = createInsertSchema(arvores).pick({\n  inspecaoId: true,\n  latitude: true,\n  longitude: true,\n  endereco: true,\n  observacao: true,\n  especieFinal: true,\n  especieConfiancaMedia: true,\n}).extend({\n  latitude: z.number().min(-90).max(90),\n  longitude: z.number().min(-180).max(180),\n});\n\nexport const insertArvoreFotoSchema = createInsertSchema(arvoreFotos).pick({\n  arvoreId: true,\n  url: true,\n});\n\n// Types\nexport type Ea = typeof eas.$inferSelect;\nexport type InsertEa = z.infer<typeof insertEaSchema>;\n\nexport type Municipio = typeof municipios.$inferSelect;\nexport type InsertMunicipio = z.infer<typeof insertMunicipioSchema>;\n\nexport type Subestacao = typeof subestacoes.$inferSelect;\nexport type InsertSubestacao = z.infer<typeof insertSubestacaoSchema>;\n\nexport type Alimentador = typeof alimentadores.$inferSelect;\nexport type InsertAlimentador = z.infer<typeof insertAlimentadorSchema>;\n\nexport type Inspecao = typeof inspecoes.$inferSelect;\nexport type InsertInspecao = z.infer<typeof insertInspecaoSchema>;\n\nexport type EspecieCandidato = typeof especieCandidatos.$inferSelect;\nexport type InsertEspecieCandidato = z.infer<typeof insertEspecieCandidatoSchema>;\n\nexport type Arvore = typeof arvores.$inferSelect;\nexport type InsertArvore = z.infer<typeof insertArvoreSchema>;\n\nexport type ArvoreFoto = typeof arvoreFotos.$inferSelect;\nexport type InsertArvoreFoto = z.infer<typeof insertArvoreFotoSchema>;\n\n// Extended types for joins\nexport type InspecaoCompleta = Inspecao & {\n  ea: Ea;\n  municipio: Municipio;\n  alimentador: Alimentador;\n  subestacao: Subestacao;\n  candidatos: EspecieCandidato[];\n  arvores?: ArvoreCompleta[];\n  totalArvores?: number;\n};\n\nexport type ArvoreCompleta = Arvore & {\n  fotos: ArvoreFoto[];\n};\n","size_bytes":6791},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(122, 39.2157%, 44.9020%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(208, 68.2796%, 55.2941%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(120, 28.5714%, 91.3725%);\n  --accent-foreground: hsl(122, 39.2157%, 44.9020%);\n  --destructive: hsl(356.3033%, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286%, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169%, 89.1213%, 53.1373%);\n  --chart-1: hsl(122, 39.2157%, 44.9020%);\n  --chart-2: hsl(159.7826%, 100%, 36.0784%);\n  --chart-3: hsl(42.0290%, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429%, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894%, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(122, 39.2157%, 44.9020%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(120, 28.5714%, 91.3725%);\n  --sidebar-accent-foreground: hsl(122, 39.2157%, 44.9020%);\n  --sidebar-border: hsl(205.0000%, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169%, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Custom primary colors from design reference */\n  --primary-50: hsl(120, 28.5714%, 91.3725%);\n  --primary-100: hsl(120, 28.5714%, 86.2745%);\n  --primary-500: hsl(122, 39.2157%, 44.9020%);\n  --primary-600: hsl(123, 43.4783%, 38.2353%);\n  --primary-700: hsl(124, 47.0588%, 29.8039%);\n  \n  /* Custom secondary colors from design reference */\n  --secondary-50: hsl(211, 100%, 96.4706%);\n  --secondary-100: hsl(211, 92.5926%, 91.7647%);\n  --secondary-500: hsl(208, 68.2796%, 55.2941%);\n  --secondary-600: hsl(209, 71.4286%, 48.6275%);\n  --secondary-700: hsl(210, 73.7705%, 38.8235%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(122, 39.2157%, 44.9020%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000%, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143%, 70%, 7.8431%);\n  --accent-foreground: hsl(122, 39.2157%, 44.9020%);\n  --destructive: hsl(356.3033%, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923%, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169%, 89.1213%, 53.1373%);\n  --chart-1: hsl(122, 39.2157%, 44.9020%);\n  --chart-2: hsl(159.7826%, 100%, 36.0784%);\n  --chart-3: hsl(42.0290%, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429%, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894%, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169%, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143%, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(122, 39.2157%, 44.9020%);\n  --sidebar-border: hsl(205.7143%, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169%, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169% 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Leaflet marker cluster custom styles */\n.marker-cluster-small {\n  background-color: hsl(122, 39.2157%, 44.9020%);\n}\n\n.marker-cluster-small div {\n  background-color: hsl(122, 45%, 35%);\n}\n\n.marker-cluster-medium {\n  background-color: hsl(42, 92%, 56%);\n}\n\n.marker-cluster-medium div {\n  background-color: hsl(42, 95%, 45%);\n}\n\n.marker-cluster-large {\n  background-color: hsl(356, 90%, 54%);\n}\n\n.marker-cluster-large div {\n  background-color: hsl(356, 95%, 45%);\n}\n\n/* Custom tree icon styles */\n.custom-tree-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Navigation styles */\n.nav-link {\n  @apply transition-colors duration-200;\n}\n\n.nav-link:hover {\n  @apply text-primary-600;\n}\n\n.nav-mobile-btn {\n  @apply transition-colors duration-200;\n}\n","size_bytes":6578},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Network, AlertTriangle, Clock, CheckCircle, Plus, Map, FileText } from \"lucide-react\";\nimport { InspecaoCompleta, Ea, Municipio } from \"@shared/schema\";\nimport { useState, useEffect } from \"react\";\n\ninterface DashboardStats {\n  totalInspections: number;\n  highPriority: number;\n  mediumPriority: number;\n  lowPriority: number;\n  byMunicipality: { municipio: string; count: number }[];\n}\n\ninterface DashboardProps {\n  onNewInspection: () => void;\n  onShowMap: () => void;\n  onShowReports: () => void;\n}\n\nexport function Dashboard({ onNewInspection, onShowMap, onShowReports }: DashboardProps) {\n  const [selectedEaId, setSelectedEaId] = useState<string>(\"all\");\n  const [selectedMunicipioId, setSelectedMunicipioId] = useState<string>(\"all\");\n\n  const { data: eas } = useQuery<Ea[]>({ queryKey: [\"/api/refs/eas\"] });\n  \n  const { data: municipios } = useQuery<Municipio[]>({\n    queryKey: [\"/api/refs/municipios\", selectedEaId],\n    enabled: selectedEaId !== \"all\",\n    queryFn: async () => {\n      const url = `/api/refs/municipios?ea_id=${encodeURIComponent(selectedEaId)}`;\n      const resp = await fetch(url);\n      if (!resp.ok) throw new Error(\"Erro ao carregar munic√≠pios\");\n      return resp.json();\n    },\n  });\n\n  // Reset munic√≠pio when EA changes\n  useEffect(() => {\n    setSelectedMunicipioId(\"all\");\n  }, [selectedEaId]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\", selectedEaId, selectedMunicipioId],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedEaId !== \"all\") params.append('ea_id', selectedEaId);\n      if (selectedMunicipioId !== \"all\") params.append('municipio_id', selectedMunicipioId);\n      const url = `/api/dashboard/stats${params.toString() ? '?' + params.toString() : ''}`;\n      const resp = await fetch(url);\n      if (!resp.ok) throw new Error(\"Erro ao carregar estat√≠sticas\");\n      return resp.json();\n    },\n  });\n\n  const { data: recentInspections, isLoading: inspectionsLoading } = useQuery<InspecaoCompleta[]>({\n    queryKey: [\"/api/inspecoes\", \"limit\", \"5\"],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append('limit', '5');\n      const url = `/api/inspecoes?${params.toString()}`;\n      const resp = await fetch(url);\n      if (!resp.ok) throw new Error(\"Erro ao carregar inspe√ß√µes recentes\");\n      return resp.json();\n    },\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"alta\": return \"text-red-600 bg-red-100\";\n      case \"media\": return \"text-amber-600 bg-amber-100\";\n      case \"baixa\": return \"text-green-600 bg-green-100\";\n      default: return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    switch (priority) {\n      case \"alta\": return \"Alta\";\n      case \"media\": return \"M√©dia\";\n      case \"baixa\": return \"Baixa\";\n      default: return priority;\n    }\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Dashboard</h2>\n          <p className=\"text-gray-600 mt-1\">Vis√£o geral das inspe√ß√µes de arboriza√ß√£o urbana</p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 flex space-x-3\">\n          <Button variant=\"outline\" onClick={onShowReports} data-testid=\"button-export\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Exportar\n          </Button>\n          <Button onClick={onNewInspection} data-testid=\"button-nova-inspecao\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nova Inspe√ß√£o\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filtros</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">EA</label>\n              <Select value={selectedEaId} onValueChange={setSelectedEaId}>\n                <SelectTrigger data-testid=\"select-ea\">\n                  <SelectValue placeholder=\"Todas as EAs\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as EAs</SelectItem>\n                  {eas?.map((ea) => (\n                    <SelectItem key={ea.id} value={ea.id}>{ea.nome}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Munic√≠pio</label>\n              <Select value={selectedMunicipioId} onValueChange={setSelectedMunicipioId} disabled={selectedEaId === \"all\"}>\n                <SelectTrigger data-testid=\"select-municipio\">\n                  <SelectValue placeholder=\"Todos os munic√≠pios\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os munic√≠pios</SelectItem>\n                  {municipios?.map((municipio) => (\n                    <SelectItem key={municipio.id} value={municipio.id}>{municipio.nome}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                onClick={() => { setSelectedEaId(\"all\"); setSelectedMunicipioId(\"all\"); }}\n                data-testid=\"button-limpar-filtros\"\n              >\n                Limpar filtros\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center\">\n                  <Network className=\"w-6 h-6 text-primary-600\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total de Inspe√ß√µes</p>\n                <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-total-inspections\">\n                  {stats?.totalInspections || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Alta Prioridade</p>\n                <p className=\"text-3xl font-bold text-red-600\" data-testid=\"text-high-priority\">\n                  {stats?.highPriority || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-6 h-6 text-amber-600\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">M√©dia Prioridade</p>\n                <p className=\"text-3xl font-bold text-amber-600\" data-testid=\"text-medium-priority\">\n                  {stats?.mediumPriority || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Baixa Prioridade</p>\n                <p className=\"text-3xl font-bold text-green-600\" data-testid=\"text-low-priority\">\n                  {stats?.lowPriority || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Inspections */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Inspe√ß√µes Recentes</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {inspectionsLoading ? (\n                <div className=\"p-6\">\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n                    ))}\n                  </div>\n                </div>\n              ) : recentInspections && recentInspections.length > 0 ? (\n                <div className=\"divide-y divide-gray-100\">\n                  {recentInspections.map((inspecao) => (\n                    <div key={inspecao.id} className=\"px-6 py-4 hover:bg-gray-50 cursor-pointer\" data-testid={`inspection-card-${inspecao.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                            <Network className=\"w-6 h-6 text-primary-600\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\" data-testid={`text-species-${inspecao.id}`}>\n                              {inspecao.especieFinal || \"Esp√©cie n√£o identificada\"}\n                            </p>\n                            <p className=\"text-sm text-gray-600\" data-testid={`text-location-${inspecao.id}`}>\n                              {inspecao.endereco || `${inspecao.municipio.nome}/SP`}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {new Date(inspecao.dataInspecao).toLocaleDateString(\"pt-BR\")} - {inspecao.ea.nome}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(inspecao.prioridade)}`}>\n                            {getPriorityLabel(inspecao.prioridade)}\n                          </span>\n                          <p className=\"text-xs text-gray-500 mt-1\">{inspecao.alimentador.codigo}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"p-6 text-center text-gray-500\">\n                  <Network className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>Nenhuma inspe√ß√£o encontrada</p>\n                </div>\n              )}\n              {recentInspections && recentInspections.length > 0 && (\n                <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"text-primary-600 hover:text-primary-700 text-sm font-medium\"\n                    data-testid=\"button-ver-todas-inspecoes\"\n                  >\n                    Ver todas as inspe√ß√µes ‚Üí\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* By Municipality Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Por Munic√≠pio</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {stats?.byMunicipality && stats.byMunicipality.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {stats.byMunicipality.slice(0, 3).map((item, index) => {\n                    const maxCount = stats.byMunicipality[0]?.count || 1;\n                    const percentage = (item.count / maxCount) * 100;\n                    return (\n                      <div key={index}>\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm text-gray-600\">{item.municipio}</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{item.count}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-primary-500 h-2 rounded-full transition-all duration-300\" \n                            style={{ width: `${percentage}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <p className=\"text-sm text-gray-500 text-center\">Nenhum dado dispon√≠vel</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>A√ß√µes R√°pidas</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button \n                  onClick={onNewInspection}\n                  className=\"w-full bg-primary-50 hover:bg-primary-100 border border-primary-200 text-primary-600\"\n                  variant=\"outline\"\n                  data-testid=\"button-quick-nova-inspecao\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nova Inspe√ß√£o\n                </Button>\n                \n                <Button \n                  onClick={onShowMap}\n                  variant=\"outline\" \n                  className=\"w-full\"\n                  data-testid=\"button-visualizar-mapa\"\n                >\n                  <Map className=\"w-4 h-4 mr-2\" />\n                  Visualizar Mapa\n                </Button>\n                \n                <Button \n                  onClick={onShowReports}\n                  variant=\"outline\" \n                  className=\"w-full\"\n                  data-testid=\"button-gerar-relatorio\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Gerar Relat√≥rio\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16115},"client/src/components/InspectionForm.tsx":{"content":"// src/components/InspectionForm.tsx\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapComponent } from \"./MapComponent\";\nimport { ObjectUploader } from \"./ObjectUploader\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertInspecaoSchema, type Ea, type Municipio, type Alimentador, type Subestacao } from \"@shared/schema\";\nimport { identificarEspecie } from \"@/services/ia\";\nimport { X, Camera, Brain, Save, MapPin } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { ArvoresFieldArray } from \"./ArvoresFieldArray\";\n\ninterface SpeciesCandidate {\n  nome: string;\n  confianca: number;\n}\ninterface SpeciesIdentificationResult {\n  especie_sugerida: string;\n  candidatos: SpeciesCandidate[];\n  confianca_media: number;\n  fonte?: string;\n}\n\nconst arvoreSchema = z.object({\n  latitude: z.number().min(-90).max(90).optional(),\n  longitude: z.number().min(-180).max(180).optional(),\n  endereco: z.string().optional(),\n  observacao: z.string().optional(),\n  especieFinal: z.string().optional(),\n  especieConfiancaMedia: z.number().optional(),\n  fotos: z.array(z.object({\n    id: z.string().optional(),\n    url: z.string()\n  })).default([])\n});\n\nconst formSchema = insertInspecaoSchema.extend({\n  foto: z.any().optional(),\n  arvores: z.array(arvoreSchema).min(1, \"Pelo menos uma √°rvore deve ser adicionada\")\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface InspectionFormProps {\n  onClose: () => void;\n  initialData?: { lat?: number; lng?: number };\n}\n\nexport function InspectionForm({ onClose, initialData }: InspectionFormProps) {\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const [showCameraOptions, setShowCameraOptions] = useState(false);\n  const [isIdentifying, setIsIdentifying] = useState(false);\n  const [speciesResults, setSpeciesResults] = useState<SpeciesIdentificationResult | null>(null);\n  const [coordinates, setCoordinates] = useState({\n    lat: initialData?.lat,\n    lng: initialData?.lng,\n  });\n  const [address, setAddress] = useState(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      numeroNota: \"\",\n      numeroOperativo: undefined,\n      dataInspecao: new Date(),\n      eaId: \"\",              // sem default \"ea1\"\n      municipioId: \"\",\n      prioridade: \"baixa\",\n      latitude: coordinates.lat,  // Manter por compatibilidade com backend\n      longitude: coordinates.lng, // Manter por compatibilidade com backend\n      endereco: \"\",              // Manter por compatibilidade com backend\n      observacoes: \"\",\n      especieFinal: \"\",\n      arvores: [{\n        latitude: coordinates.lat,\n        longitude: coordinates.lng,\n        endereco: \"\",\n        observacao: \"\",\n        especieFinal: \"\",\n        especieConfiancaMedia: undefined,\n        fotos: []\n      }]\n    },\n  });\n\n  // --------- Refer√™ncias ----------\n  const { data: eas } = useQuery<Ea[]>({ queryKey: [\"/api/refs/eas\"] });\n\n  // pr√©-seleciona a primeira EA carregada (opcional)\n  useEffect(() => {\n    if (!form.getValues(\"eaId\") && eas?.length) {\n      form.setValue(\"eaId\", eas[0].id);\n    }\n  }, [eas]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const selectedEaId = form.watch(\"eaId\");\n\n  // zera munic√≠pio ao trocar EA\n  useEffect(() => {\n    form.setValue(\"municipioId\", \"\");\n  }, [selectedEaId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Municipios filtrados por EA ‚Äì passa ea_id na URL\n  const { data: municipios, isFetching: municipiosLoading } = useQuery<Municipio[]>({\n    queryKey: [\"/api/refs/municipios\", selectedEaId],\n    enabled: !!selectedEaId,\n    queryFn: async () => {\n      const url = `/api/refs/municipios?ea_id=${encodeURIComponent(selectedEaId!)}`;\n      const resp = await fetch(url);\n      if (!resp.ok) throw new Error(\"Erro ao carregar munic√≠pios\");\n      return resp.json();\n    },\n  });\n\n  const { data: alimentadores } = useQuery<Alimentador[]>({ queryKey: [\"/api/refs/alimentadores\"] });\n  const { data: subestacoes } = useQuery<Subestacao[]>({ queryKey: [\"/api/refs/subestacoes\"] });\n\n  // --------- Muta√ß√£o (criar inspe√ß√£o) ----------\n  const createInspectionMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const fd = new FormData();\n      Object.entries(data).forEach(([key, value]) => {\n        if (key !== \"foto\" && key !== \"arvores\" && value !== undefined && value !== null) {\n          if (value instanceof Date) fd.append(key, value.toISOString());\n          else fd.append(key, String(value));\n        }\n      });\n      if (uploadedImageUrl) fd.append(\"fotoUrl\", uploadedImageUrl);\n      \n      // Add trees as JSON string in 'items' field (expected by server)\n      if (data.arvores && data.arvores.length > 0) {\n        fd.append(\"items\", JSON.stringify(data.arvores));\n      }\n\n      const resp = await fetch(\"/api/inspecoes\", { method: \"POST\", body: fd });\n      if (!resp.ok) throw new Error((await resp.json()).message || \"Erro ao criar inspe√ß√£o\");\n      return resp.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inspecoes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/arvores\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({ title: \"Sucesso\", description: \"Inspe√ß√£o criada com sucesso!\" });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro\", description: error.message || \"Erro ao criar inspe√ß√£o\", variant: \"destructive\" });\n    },\n  });\n\n  // --------- Geolocaliza√ß√£o / geocoding ----------\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      toast({ title: \"Geolocaliza√ß√£o n√£o suportada\", description: \"Seu navegador n√£o suporta geolocaliza√ß√£o\", variant: \"destructive\" });\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const newCoords = { lat: position.coords.latitude, lng: position.coords.longitude };\n        setCoordinates(newCoords);\n        form.setValue(\"latitude\", newCoords.lat);\n        form.setValue(\"longitude\", newCoords.lng);\n        reverseGeocode(newCoords.lat, newCoords.lng);\n        toast({ title: \"Localiza√ß√£o obtida\", description: \"Coordenadas atualizadas com sua localiza√ß√£o atual\" });\n      },\n      () => {\n        toast({\n          title: \"Erro de localiza√ß√£o\",\n          description: \"N√£o foi poss√≠vel obter sua localiza√ß√£o. Verifique as permiss√µes do navegador.\",\n          variant: \"destructive\",\n        });\n      }\n    );\n  };\n\n  const reverseGeocode = async (lat: number, lng: number) => {\n    try {\n      const response = await fetch(`/api/geocoding/reverse?lat=${lat}&lng=${lng}`);\n      const data = await response.json();\n      if (data.endereco) {\n        setAddress(data.endereco);\n        form.setValue(\"endereco\", data.endereco);\n        await autoFillMunicipality(data.endereco);\n      }\n    } catch (e) {\n      console.error(\"Erro no geocoding:\", e);\n    }\n  };\n\n  const handleCameraCapture = async (event: Event) => {\n    const input = event.target as HTMLInputElement;\n    const file = input.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      setPhotoPreview(result);\n      toast({ title: \"Foto capturada\", description: \"Use o bot√£o 'Identificar Esp√©cie' para an√°lise.\" });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // tenta selecionar munic√≠pio com base no endere√ßo\n  const autoFillMunicipality = async (endereco: string) => {\n    if (!municipios?.length) return;\n    const addressLower = endereco.toLowerCase();\n    const addressParts = endereco.split(\",\").map((p: string) => p.trim());\n\n    let matching: Municipio | null = null;\n\n    for (const m of municipios) {\n      const name = m.nome.toLowerCase();\n      if (addressLower.includes(name)) { matching = m; break; }\n    }\n    if (!matching) {\n      outer: for (const part of addressParts) {\n        const p = part.toLowerCase();\n        for (const m of municipios) {\n          const name = m.nome.toLowerCase();\n          if (p.includes(name) || name.includes(p)) { matching = m; break outer; }\n        }\n      }\n    }\n    if (matching) {\n      form.setValue(\"municipioId\", matching.id);\n      toast({ title: \"Munic√≠pio identificado\", description: `${matching.nome} selecionado automaticamente` });\n    }\n  };\n\n  // --------- Upload objeto (replit object storage / supabase signed URL etc.) ----------\n  const handleGetUploadParameters = async () => {\n    const resp = await fetch(\"/api/objects/upload\", { method: \"POST\", headers: { \"Content-Type\": \"application/json\" } });\n    if (!resp.ok) throw new Error(\"Erro ao obter URL de upload\");\n    const { uploadURL } = await resp.json();\n    return { method: \"PUT\" as const, url: uploadURL };\n  };\n\n  const handleUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (!result.successful?.length) return;\n    const imageUrl = result.successful[0].uploadURL as string | undefined;\n    if (!imageUrl) return;\n\n    setUploadedImageUrl(imageUrl);\n    setPhotoPreview(imageUrl);\n\n    try {\n      await fetch(\"/api/tree-images\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ imageUrl, inspecaoId: \"temp\" }),\n      });\n      toast({ title: \"Upload conclu√≠do\", description: \"Foto da √°rvore enviada com sucesso!\" });\n    } catch (e) {\n      console.error(\"Erro ao configurar pol√≠tica de acesso:\", e);\n    }\n  };\n\n\n  // Automatic species identification when photo is added\n  const identifySpeciesAutomatically = async (index: number, photoUrl: string) => {\n    setIsIdentifying(true);\n    \n    try {\n      // Convert blob URL to a file that can be uploaded to server\n      const response = await fetch(photoUrl);\n      const blob = await response.blob();\n      const file = new File([blob], `tree-${index}.jpg`, { type: 'image/jpeg' });\n      \n      // Create FormData for upload\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Upload image to server first\n      const uploadResponse = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!uploadResponse.ok) {\n        throw new Error('Falha no upload da imagem');\n      }\n      \n      const uploadData = await uploadResponse.json();\n      const serverImageUrl = uploadData.url;\n      \n      // Now identify species using the server URL\n      const result = await identificarEspecie(serverImageUrl, []);\n      \n      // Update specific tree data using both form.setValue and direct update\n      console.log(\"Resultado da identifica√ß√£o:\", result);\n      \n      form.setValue(`arvores.${index}.especieFinal`, result.especie_sugerida);\n      form.setValue(`arvores.${index}.especieConfiancaMedia`, result.confianca_media);\n      \n      // Also trigger the component update directly\n      const arvores = form.getValues(\"arvores\");\n      const updatedArvore = {\n        ...arvores[index],\n        especieFinal: result.especie_sugerida,\n        especieConfiancaMedia: result.confianca_media\n      };\n      \n      // Update the arvores array\n      const updatedArvores = [...arvores];\n      updatedArvores[index] = updatedArvore;\n      form.setValue(\"arvores\", updatedArvores);\n      \n      console.log(\"√Årvore atualizada:\", updatedArvore);\n      \n      toast({\n        title: \"Esp√©cie identificada\",\n        description: `√Årvore ${index + 1}: ${result.especie_sugerida} com ${result.confianca_media?.toFixed(0) || 0}% de confian√ßa`,\n      });\n    } catch (e) {\n      console.error(\"Erro na identifica√ß√£o autom√°tica:\", e);\n      toast({\n        title: \"Identifica√ß√£o n√£o realizada\",\n        description: \"Voc√™ pode inserir a esp√©cie manualmente no campo abaixo.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsIdentifying(false);\n    }\n  };\n\n  const handleMarkerDrag = (lat: number, lng: number) => {\n    setCoordinates({ lat, lng });\n    form.setValue(\"latitude\", lat);\n    form.setValue(\"longitude\", lng);\n    reverseGeocode(lat, lng);\n  };\n\n  const useSpeciesCandidate = (c: SpeciesCandidate) => {\n    form.setValue(\"especieFinal\", c.nome);\n    form.setValue(\"especieConfiancaMedia\", c.confianca);\n    toast({ title: \"Esp√©cie selecionada\", description: `${c.nome} selecionada como esp√©cie final` });\n  };\n\n  const onSubmit = (data: FormData) => {\n    if (uploadedImageUrl) data.fotoUrl = uploadedImageUrl;\n    \n    // Debug: Log what's being submitted\n    console.log(\"=== SUBMIT DEBUG ===\");\n    console.log(\"Form data received:\", data);\n    console.log(\"√Årvores data:\", data.arvores);\n    console.log(\"Form.getValues():\", form.getValues());\n    \n    // Use coordinates from first tree for main inspection data (for compatibility)\n    const firstTree = data.arvores[0];\n    const inspectionData = {\n      ...data,\n      latitude: firstTree?.latitude || coordinates.lat || -23.2109,\n      longitude: firstTree?.longitude || coordinates.lng || -47.2957,\n      endereco: firstTree?.endereco || \"\",\n      arvores: data.arvores\n    };\n    \n    console.log(\"Final inspection data:\", inspectionData);\n    console.log(\"====================\");\n    \n    createInspectionMutation.mutate(inspectionData);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Nova Inspe√ß√£o</h2>\n          <p className=\"text-gray-600 mt-1\">Registre uma nova inspe√ß√£o de √°rvore urbana</p>\n        </div>\n        <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-form\">\n          <X className=\"w-6 h-6\" />\n        </Button>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Informa√ß√µes B√°sicas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"numeroNota\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>N√∫mero da Nota *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ex: 2024001\" {...field} data-testid=\"input-numero-nota\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"numeroOperativo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>N√∫mero Operativo</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ex: OP-2024-001\" {...field} value={field.value || \"\"} data-testid=\"input-numero-operativo\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dataInspecao\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data da Inspe√ß√£o *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"datetime-local\"\n                        value={field.value instanceof Date ? field.value.toISOString().slice(0, 16) : \"\"}\n                        onChange={(e) => field.onChange(new Date(e.target.value))}\n                        data-testid=\"input-data-inspecao\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"prioridade\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prioridade *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"select-prioridade\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione a prioridade\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"z-[9999]\" position=\"popper\">\n                        <SelectItem value=\"baixa\">Baixa</SelectItem>\n                        <SelectItem value=\"media\">M√©dia</SelectItem>\n                        <SelectItem value=\"alta\">Alta</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Location Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Localiza√ß√£o</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"eaId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>EA (Esta√ß√£o Avan√ßada) *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value ?? \"\"} data-testid=\"select-ea\">\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione a EA\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"z-[9999]\" position=\"popper\">\n                          {eas?.map((ea) => (\n                            <SelectItem key={ea.id} value={ea.id}>\n                              {ea.nome}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"municipioId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Munic√≠pio *</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        value={field.value ?? \"\"}\n                        disabled={!selectedEaId || !municipios?.length || municipiosLoading}\n                        data-testid=\"select-municipio\"\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder={municipiosLoading ? \"Carregando...\" : \"Selecione o munic√≠pio\"} />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"z-[9999]\" position=\"popper\">\n                          {municipios?.map((m) => (\n                            <SelectItem key={m.id} value={m.id}>\n                              {m.nome}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"alimentadorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Alimentador *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value ?? \"\"} data-testid=\"select-alimentador\">\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o alimentador\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"z-[9999]\" position=\"popper\">\n                          {alimentadores?.map((a) => (\n                            <SelectItem key={a.id} value={a.id}>\n                              {a.codigo}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"subestacaoId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subesta√ß√£o</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value ?? \"\"} data-testid=\"select-subestacao\">\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione a subesta√ß√£o\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"z-[9999]\" position=\"popper\">\n                          {subestacoes?.map((s) => (\n                            <SelectItem key={s.id} value={s.id}>\n                              {s.nome}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n              </div>\n\n              {/* GPS Coordinates Section */}\n              <div className=\"border-t pt-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Coordenadas GPS da Inspe√ß√£o</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={getCurrentLocation}\n                    data-testid=\"button-use-gps\"\n                  >\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    Usar GPS\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"latitude\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Latitude</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"any\"\n                            placeholder=\"Ex: -23.550520\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => field.onChange(e.target.value ? parseFloat(e.target.value) : undefined)}\n                            data-testid=\"input-latitude\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"longitude\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Longitude</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"any\"\n                            placeholder=\"Ex: -47.295757\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => field.onChange(e.target.value ? parseFloat(e.target.value) : undefined)}\n                            data-testid=\"input-longitude\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endereco\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Endere√ßo</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Endere√ßo ser√° preenchido automaticamente\"\n                            {...field}\n                            value={field.value || \"\"}\n                            data-testid=\"input-endereco\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {coordinates.lat && coordinates.lng && (\n                  <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-md\">\n                    <p className=\"text-sm text-green-800\">\n                      <MapPin className=\"w-4 h-4 inline mr-1\" />\n                      Coordenadas: {coordinates.lat.toFixed(6)}, {coordinates.lng.toFixed(6)}\n                    </p>\n                    {address && (\n                      <p className=\"text-sm text-green-700 mt-1\">\n                        üìç {address}\n                      </p>\n                    )}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Trees Field Array - Multiple trees per inspection */}\n          <ArvoresFieldArray\n            control={form.control}\n            name=\"arvores\"\n            form={form}\n            onPhotoAdded={(index, photoUrl) => {\n              identifySpeciesAutomatically(index, photoUrl);\n            }}\n          />\n\n          {/* Additional Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Observa√ß√µes Adicionais</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <FormField\n                control={form.control}\n                name=\"observacoes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Observa√ß√µes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        rows={4}\n                        placeholder=\"Descreva detalhes sobre a condi√ß√£o da √°rvore, interfer√™ncias na rede el√©trica, riscos identificados, necessidade de poda, etc.\"\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"textarea-observacoes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Form Actions */}\n          <div className=\"flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-4 pt-6 border-t border-gray-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancelar\">\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={createInspectionMutation.isPending} className=\"bg-primary-600 hover:bg-primary-700\" data-testid=\"button-salvar-inspecao\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              {createInspectionMutation.isPending ? \"Salvando...\" : \"Salvar Inspe√ß√£o\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n\n","size_bytes":28937},"client/src/components/InspectionsTable.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Filter, \n  FileText, \n  Download, \n  Plus, \n  Edit, \n  MapPin, \n  Trash2,\n  ChevronLeft,\n  ChevronRight \n} from \"lucide-react\";\nimport { InspecaoCompleta, type Ea, type Municipio } from \"@shared/schema\";\n\ninterface InspectionsTableProps {\n  onNewInspection: () => void;\n  onEditInspection?: (inspection: InspecaoCompleta) => void;\n  onShowMap?: (inspection: InspecaoCompleta) => void;\n}\n\ninterface TableFilters {\n  eaId?: string;\n  municipioId?: string;\n  prioridade?: string;\n  dataInicio?: string;\n  dataFim?: string;\n  numeroNota?: string;\n}\n\nexport function InspectionsTable({ onNewInspection, onEditInspection, onShowMap }: InspectionsTableProps) {\n  const queryClient = useQueryClient();\n  const [filters, setFilters] = useState<TableFilters>({});\n  const [currentPage, setCurrentPage] = useState(1);\n  const [showFilters, setShowFilters] = useState(false);\n  const [searchNota, setSearchNota] = useState(\"\");\n  const itemsPerPage = 10;\n\n  // Fetch reference data\n  const { data: eas } = useQuery<Ea[]>({ queryKey: [\"/api/refs/eas\"] });\n  const { data: municipios } = useQuery<Municipio[]>({ queryKey: [\"/api/refs/municipios\"] });\n\n  // Fetch inspections with filters\n  const { data: inspections = [], isLoading } = useQuery<InspecaoCompleta[]>({\n    queryKey: [\n      \"/api/inspecoes\",\n      filters.eaId || \"all\",\n      filters.municipioId || \"all\", \n      filters.prioridade || \"all\",\n      filters.dataInicio || \"all\",\n      filters.dataFim || \"all\",\n      filters.numeroNota || \"all\",\n      currentPage.toString(),\n      itemsPerPage.toString()\n    ],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.eaId) params.append('ea_id', filters.eaId);\n      if (filters.municipioId) params.append('municipio_id', filters.municipioId);\n      if (filters.prioridade) params.append('prioridade', filters.prioridade);\n      if (filters.dataInicio) params.append('data_inicio', filters.dataInicio);\n      if (filters.dataFim) params.append('data_fim', filters.dataFim);\n      if (filters.numeroNota) params.append('numeroNota', filters.numeroNota);\n      params.append('limit', itemsPerPage.toString());\n      params.append('offset', ((currentPage - 1) * itemsPerPage).toString());\n\n      const url = `/api/inspecoes${params.toString() ? '?' + params.toString() : ''}`;\n      const resp = await fetch(url);\n      if (!resp.ok) throw new Error(\"Erro ao carregar inspe√ß√µes\");\n      return resp.json();\n    },\n  });\n\n  // Export functions\n  const handleExport = async (format: 'csv' | 'pdf' | 'kml') => {\n    const queryParams = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) queryParams.append(key, value);\n    });\n\n    const url = `/api/export/${format}?${queryParams.toString()}`;\n    \n    try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Erro na exporta√ß√£o');\n      \n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      \n      const extensions = { csv: 'csv', pdf: 'pdf', kml: 'kml' };\n      link.download = `inspecoes.${extensions[format]}`;\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n    } catch (error) {\n      console.error('Erro na exporta√ß√£o:', error);\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"alta\": return \"destructive\";\n      case \"media\": return \"secondary\";\n      case \"baixa\": return \"default\";\n      default: return \"outline\";\n    }\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    switch (priority) {\n      case \"alta\": return \"Alta\";\n      case \"media\": return \"M√©dia\";\n      case \"baixa\": return \"Baixa\";\n      default: return priority;\n    }\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n    setCurrentPage(1);\n  };\n\n  // Delete inspection mutation\n  const deleteInspectionMutation = useMutation({\n    mutationFn: async (inspectionId: string) => {\n      const response = await fetch(`/api/inspecoes/${inspectionId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Erro ao excluir inspe√ß√£o');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inspecoes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({ \n        title: \"Sucesso\", \n        description: \"Inspe√ß√£o exclu√≠da com sucesso!\" \n      });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erro\", \n        description: error.message || \"Erro ao excluir inspe√ß√£o\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleDeleteInspection = (inspection: InspecaoCompleta) => {\n    if (window.confirm(`Tem certeza que deseja excluir a inspe√ß√£o ${inspection.numeroNota}? Esta a√ß√£o n√£o pode ser desfeita.`)) {\n      deleteInspectionMutation.mutate(inspection.id);\n    }\n  };\n\n  const handleShowMap = (inspection: InspecaoCompleta) => {\n    if (onShowMap) {\n      onShowMap(inspection);\n    } else {\n      // Fallback: open in new tab with Google Maps\n      const url = `https://www.google.com/maps?q=${inspection.latitude},${inspection.longitude}`;\n      window.open(url, '_blank');\n    }\n  };\n\n  const totalPages = Math.ceil(inspections.length / itemsPerPage);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Inspe√ß√µes</h2>\n          <p className=\"text-gray-600 mt-1\">Gerencie todas as inspe√ß√µes registradas</p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"Buscar por n√∫mero da nota...\"\n              value={searchNota}\n              onChange={(e) => {\n                setSearchNota(e.target.value);\n                setFilters(prev => ({ ...prev, numeroNota: e.target.value || undefined }));\n              }}\n              className=\"w-64\"\n              data-testid=\"input-search-nota\"\n            />\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowFilters(!showFilters)}\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtros\n            </Button>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => handleExport('csv')}\n              data-testid=\"button-export-csv\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              CSV\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => handleExport('pdf')}\n              data-testid=\"button-export-pdf\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              PDF\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => handleExport('kml')}\n              data-testid=\"button-export-kml\"\n            >\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              KML\n            </Button>\n          </div>\n          <Button onClick={onNewInspection} data-testid=\"button-nova-inspecao\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nova Inspe√ß√£o\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"filter-ea\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  EA\n                </Label>\n                <Select \n                  value={filters.eaId || \"all\"} \n                  onValueChange={(value) => setFilters(prev => ({ ...prev, eaId: value === \"all\" ? undefined : value }))}\n                >\n                  <SelectTrigger data-testid=\"filter-ea\">\n                    <SelectValue placeholder=\"Todas as EAs\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as EAs</SelectItem>\n                    {eas?.map((ea) => (\n                      <SelectItem key={ea.id} value={ea.id}>\n                        {ea.nome}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"filter-municipio\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  Munic√≠pio\n                </Label>\n                <Select \n                  value={filters.municipioId || \"all\"} \n                  onValueChange={(value) => setFilters(prev => ({ ...prev, municipioId: value === \"all\" ? undefined : value }))}\n                >\n                  <SelectTrigger data-testid=\"filter-municipio\">\n                    <SelectValue placeholder=\"Todos os munic√≠pios\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os munic√≠pios</SelectItem>\n                    {municipios?.map((municipio) => (\n                      <SelectItem key={municipio.id} value={municipio.id}>\n                        {municipio.nome}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"filter-prioridade\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  Prioridade\n                </Label>\n                <Select \n                  value={filters.prioridade || \"all\"} \n                  onValueChange={(value) => setFilters(prev => ({ ...prev, prioridade: value === \"all\" ? undefined : value }))}\n                >\n                  <SelectTrigger data-testid=\"filter-prioridade\">\n                    <SelectValue placeholder=\"Todas as prioridades\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as prioridades</SelectItem>\n                    <SelectItem value=\"alta\">Alta</SelectItem>\n                    <SelectItem value=\"media\">M√©dia</SelectItem>\n                    <SelectItem value=\"baixa\">Baixa</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"filter-data\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  Data In√≠cio\n                </Label>\n                <Input \n                  type=\"date\" \n                  value={filters.dataInicio || \"\"} \n                  onChange={(e) => setFilters(prev => ({ ...prev, dataInicio: e.target.value || undefined }))}\n                  data-testid=\"filter-data-inicio\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"mt-4 flex justify-between\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => {\n                  clearFilters();\n                  setSearchNota(\"\");\n                }} \n                data-testid=\"button-limpar-filtros\"\n              >\n                Limpar filtros\n              </Button>\n              <p className=\"text-sm text-gray-500\">\n                {inspections.length} registros encontrados\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Data Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          {isLoading ? (\n            <div className=\"p-8 text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-2 text-gray-500\">Carregando inspe√ß√µes...</p>\n            </div>\n          ) : inspections.length === 0 ? (\n            <div className=\"p-8 text-center text-gray-500\">\n              <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p>Nenhuma inspe√ß√£o encontrada</p>\n              <p className=\"text-sm text-gray-400 mt-2\">\n                {Object.keys(filters).some(key => filters[key as keyof TableFilters]) ? 'Tente ajustar os filtros ou limpar a busca' : 'Use o bot√£o \"Nova Inspe√ß√£o\" para criar a primeira inspe√ß√£o'}\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>N√∫mero da Nota</TableHead>\n                    <TableHead>Data/EA</TableHead>\n                    <TableHead>Localiza√ß√£o</TableHead>\n                    <TableHead>Esp√©cie</TableHead>\n                    <TableHead className=\"text-center\">Qtd. √Årvores</TableHead>\n                    <TableHead>Prioridade</TableHead>\n                    <TableHead>A√ß√µes</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {inspections.map((inspecao) => (\n                    <TableRow key={inspecao.id} className=\"hover:bg-gray-50\" data-testid={`row-inspection-${inspecao.id}`}>\n                      <TableCell>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900 font-mono\">\n                            {inspecao.numeroNota}\n                          </div>\n                          {inspecao.numeroOperativo && (\n                            <div className=\"text-xs text-gray-500 font-mono\">\n                              {inspecao.numeroOperativo}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {new Date(inspecao.dataInspecao).toLocaleDateString(\"pt-BR\")} {new Date(inspecao.dataInspecao).toLocaleTimeString(\"pt-BR\", { hour: '2-digit', minute: '2-digit' })}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">{inspecao.ea.nome}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"text-sm text-gray-900\">{inspecao.municipio.nome}/SP</div>\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            {inspecao.endereco || \"Endere√ßo n√£o informado\"}\n                          </div>\n                          <div className=\"text-xs text-gray-400 font-mono\">\n                            {inspecao.latitude.toFixed(6)}, {inspecao.longitude.toFixed(6)}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {inspecao.especieFinal || \"N√£o identificada\"}\n                          </div>\n                          {inspecao.especieConfiancaMedia && (\n                            <div className=\"text-sm text-gray-500\">\n                              Confian√ßa: {inspecao.especieConfiancaMedia.toFixed(0)}%\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {inspecao.totalArvores ?? 0}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getPriorityColor(inspecao.prioridade)}>\n                          {getPriorityLabel(inspecao.prioridade)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => onEditInspection?.(inspecao)}\n                            data-testid={`button-edit-${inspecao.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleShowMap(inspecao)}\n                            data-testid={`button-map-${inspecao.id}`}\n                          >\n                            <MapPin className=\"w-4 h-4\" />\n                          </Button>\n                          {inspecao.fotoUrl && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => window.open(inspecao.fotoUrl!, '_blank')}\n                              data-testid={`button-download-${inspecao.id}`}\n                            >\n                              <Download className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteInspection(inspecao)}\n                            disabled={deleteInspectionMutation.isPending}\n                            data-testid={`button-delete-${inspecao.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-600\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n          \n          {/* Pagination */}\n          {inspections.length > 0 && (\n            <div className=\"border-t border-gray-200 px-6 py-4 flex items-center justify-between\">\n              <div className=\"flex-1 flex justify-between sm:hidden\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                  data-testid=\"button-prev-mobile\"\n                >\n                  Anterior\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                  data-testid=\"button-next-mobile\"\n                >\n                  Pr√≥ximo\n                </Button>\n              </div>\n              <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-700\">\n                    Mostrando <span className=\"font-medium\">{(currentPage - 1) * itemsPerPage + 1}</span> at√©{' '}\n                    <span className=\"font-medium\">{Math.min(currentPage * itemsPerPage, inspections.length)}</span> de{' '}\n                    <span className=\"font-medium\">{inspections.length}</span> resultados\n                  </p>\n                </div>\n                <div className=\"flex space-x-1\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                    disabled={currentPage === 1}\n                    data-testid=\"button-prev\"\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  {[...Array(Math.min(totalPages, 5))].map((_, i) => {\n                    const pageNumber = i + 1;\n                    return (\n                      <Button\n                        key={pageNumber}\n                        variant={currentPage === pageNumber ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNumber)}\n                        data-testid={`button-page-${pageNumber}`}\n                      >\n                        {pageNumber}\n                      </Button>\n                    );\n                  })}\n                  \n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                    disabled={currentPage === totalPages}\n                    data-testid=\"button-next\"\n                  >\n                    <ChevronRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":22153},"client/src/components/MapComponent.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\nimport \"leaflet.markercluster\";\n\n// Fix for default markers\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png\",\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png\",\n});\n\ninterface MapComponentProps {\n  height?: string;\n  center?: [number, number];\n  zoom?: number;\n  markers?: Array<{\n    id: string;\n    lat: number;\n    lng: number;\n    popup?: string;\n    priority?: \"alta\" | \"media\" | \"baixa\";\n  }>;\n  draggableMarker?: {\n    lat: number;\n    lng: number;\n    onDrag?: (lat: number, lng: number) => void;\n  };\n  onMapClick?: (lat: number, lng: number) => void;\n  className?: string;\n}\n\nconst DEFAULT_CENTER: [number, number] = [-23.2109, -47.2957];\n\nexport function MapComponent({\n  height = \"400px\",\n  center = DEFAULT_CENTER,\n  zoom = 13,\n  markers = [],\n  draggableMarker,\n  onMapClick,\n  className = \"\"\n}: MapComponentProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<L.Map | null>(null);\n  const markersGroupRef = useRef<any>(null);\n  const draggableMarkerRef = useRef<L.Marker | null>(null);\n\n  // Custom tree icons\n  const getTreeIcon = (priority: string) => {\n    const color = priority === \"alta\" ? \"#ef4444\" : priority === \"media\" ? \"#f59e0b\" : \"#10b981\";\n    return L.divIcon({\n      html: `<div style=\"background-color: ${color}; border: 2px solid white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 4px rgba(0,0,0,0.2);\">\n               <i class=\"fas fa-tree\" style=\"color: white; font-size: 10px;\"></i>\n             </div>`,\n      className: \"custom-tree-icon\",\n      iconSize: [20, 20],\n      iconAnchor: [10, 10]\n    });\n  };\n\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    // Initialize map\n    mapInstanceRef.current = L.map(mapRef.current).setView(center, zoom);\n\n    // Add tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '¬© OpenStreetMap contributors'\n    }).addTo(mapInstanceRef.current);\n\n    // Initialize marker cluster group\n    markersGroupRef.current = (L as any).markerClusterGroup({\n      chunkedLoading: true,\n      spiderfyOnMaxZoom: false,\n      showCoverageOnHover: false,\n      zoomToBoundsOnClick: true\n    });\n    mapInstanceRef.current.addLayer(markersGroupRef.current);\n\n    // Add map click handler\n    if (onMapClick) {\n      mapInstanceRef.current.on('click', (e: L.LeafletMouseEvent) => {\n        onMapClick(e.latlng.lat, e.latlng.lng);\n      });\n    }\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update markers when markers prop changes\n  useEffect(() => {\n    if (!markersGroupRef.current) return;\n\n    markersGroupRef.current.clearLayers();\n\n    markers.forEach(marker => {\n      const leafletMarker = L.marker([marker.lat, marker.lng], {\n        icon: getTreeIcon(marker.priority || \"baixa\")\n      });\n\n      if (marker.popup) {\n        leafletMarker.bindPopup(marker.popup);\n      }\n\n      markersGroupRef.current!.addLayer(leafletMarker);\n    });\n  }, [markers]);\n\n  // Update draggable marker\n  useEffect(() => {\n    if (!mapInstanceRef.current) return;\n\n    // Remove existing draggable marker\n    if (draggableMarkerRef.current) {\n      mapInstanceRef.current.removeLayer(draggableMarkerRef.current);\n      draggableMarkerRef.current = null;\n    }\n\n    // Add new draggable marker if provided\n    if (draggableMarker) {\n      draggableMarkerRef.current = L.marker([draggableMarker.lat, draggableMarker.lng], {\n        draggable: true\n      }).addTo(mapInstanceRef.current);\n\n      draggableMarkerRef.current.on('dragend', (e) => {\n        const marker = e.target;\n        const position = marker.getLatLng();\n        draggableMarker.onDrag?.(position.lat, position.lng);\n      });\n\n      // Center map on draggable marker\n      mapInstanceRef.current.setView([draggableMarker.lat, draggableMarker.lng]);\n    }\n  }, [draggableMarker]);\n\n  return (\n    <div \n      ref={mapRef} \n      style={{ height }} \n      className={`rounded-lg border border-gray-300 ${className}`}\n    />\n  );\n}\n","size_bytes":4631},"client/src/components/MapView.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { MapComponent } from \"./MapComponent\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Maximize, \n  Layers, \n  Navigation, \n  X,\n  Network,\n  Edit,\n  Eye\n} from \"lucide-react\";\nimport { InspecaoCompleta, type Ea, type Municipio } from \"@shared/schema\";\n\ninterface MapViewProps {\n  onNewInspection: (coordinates?: { lat: number; lng: number }) => void;\n  onEditInspection?: (inspection: InspecaoCompleta) => void;\n}\n\ninterface MapFilters {\n  eaId?: string;\n  municipioId?: string;\n  prioridade: {\n    alta: boolean;\n    media: boolean;\n    baixa: boolean;\n  };\n  dataInicio?: string;\n  dataFim?: string;\n}\n\nexport function MapView({ onNewInspection, onEditInspection }: MapViewProps) {\n  const [filters, setFilters] = useState<MapFilters>({\n    prioridade: {\n      alta: true,\n      media: true,\n      baixa: true\n    }\n  });\n  const [selectedInspection, setSelectedInspection] = useState<InspecaoCompleta | null>(null);\n  const DEFAULT_CENTER: [number, number] = [-23.2109, -47.2957];\n  const [mapCenter, setMapCenter] = useState<[number, number]>(DEFAULT_CENTER);\n\n  // Fetch reference data\n  const { data: eas } = useQuery<Ea[]>({ queryKey: [\"/api/refs/eas\"] });\n  const { data: municipios } = useQuery<Municipio[]>({ queryKey: [\"/api/refs/municipios\"] });\n\n  // Fetch all trees (arvores) for the map\n  const { data: arvores = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/arvores\"],\n  });\n\n  // Fetch inspections for filters reference\n  const { data: inspections = [] } = useQuery<InspecaoCompleta[]>({\n    queryKey: [\"/api/inspecoes\"],\n  });\n\n  // Filter trees based on priority checkboxes and other filters\n  const filteredArvores = arvores.filter(arvore => {\n    // Check priority filter\n    const prioridadeMatch = filters.prioridade[arvore.inspecao?.prioridade as keyof typeof filters.prioridade];\n    \n    // Check EA filter\n    const eaMatch = !filters.eaId || arvore.inspecao?.eaId === filters.eaId;\n    \n    // Check municipality filter  \n    const municipioMatch = !filters.municipioId || arvore.inspecao?.municipioId === filters.municipioId;\n\n    return prioridadeMatch && eaMatch && municipioMatch;\n  });\n\n  // Convert trees to map markers\n  const mapMarkers = filteredArvores.map(arvore => ({\n    id: arvore.id,\n    lat: arvore.latitude,\n    lng: arvore.longitude,\n    priority: arvore.inspecao?.prioridade as \"alta\" | \"media\" | \"baixa\",\n    popup: `\n      <div class=\"p-2\">\n        <h4 class=\"font-semibold\">${arvore.especieFinal || \"Esp√©cie n√£o identificada\"}</h4>\n        <p class=\"text-sm text-gray-600\">${arvore.municipio?.nome} - ${arvore.ea?.nome}</p>\n        <p class=\"text-sm text-gray-500\">${arvore.alimentador?.codigo}</p>\n        <p class=\"text-sm text-gray-600\">üìç ${arvore.endereco || 'Endere√ßo n√£o informado'}</p>\n        <div class=\"mt-2\">\n          <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n            arvore.inspecao?.prioridade === 'alta' ? 'bg-red-100 text-red-800' :\n            arvore.inspecao?.prioridade === 'media' ? 'bg-amber-100 text-amber-800' :\n            'bg-green-100 text-green-800'\n          }\">\n            ${arvore.inspecao?.prioridade === 'alta' ? 'Alta' : arvore.inspecao?.prioridade === 'media' ? 'M√©dia' : 'Baixa'} Prioridade\n          </span>\n        </div>\n      </div>\n    `\n  }));\n\n  const clearFilters = () => {\n    setFilters({\n      prioridade: {\n        alta: true,\n        media: true,\n        baixa: true\n      },\n      eaId: undefined,\n      municipioId: undefined,\n      dataInicio: undefined,\n      dataFim: undefined\n    });\n  };\n\n  const handleMapClick = (lat: number, lng: number) => {\n    onNewInspection({ lat, lng });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"alta\": return \"text-red-600 bg-red-100\";\n      case \"media\": return \"text-amber-600 bg-amber-100\";\n      case \"baixa\": return \"text-green-600 bg-green-100\";\n      default: return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    switch (priority) {\n      case \"alta\": return \"Alta\";\n      case \"media\": return \"M√©dia\";\n      case \"baixa\": return \"Baixa\";\n      default: return priority;\n    }\n  };\n\n  const currentStats = {\n    total: filteredArvores.length,\n    alta: filteredArvores.filter(a => a.inspecao?.prioridade === \"alta\").length,\n    media: filteredArvores.filter(a => a.inspecao?.prioridade === \"media\").length,\n    baixa: filteredArvores.filter(a => a.inspecao?.prioridade === \"baixa\").length,\n  };\n\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-8\">\n      {/* Map Container */}\n      <div className=\"flex-1\">\n        <Card className=\"overflow-hidden\">\n          <CardHeader className=\"p-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Mapa de Inspe√ß√µes</CardTitle>\n              <div className=\"flex items-center space-x-3\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-current-location\">\n                  <Navigation className=\"w-4 h-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-toggle-layers\">\n                  <Layers className=\"w-4 h-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-fullscreen\">\n                  <Maximize className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <div className=\"relative\">\n            {isLoading ? (\n              <div className=\"h-96 lg:h-[600px] flex items-center justify-center bg-gray-50\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : (\n              <MapComponent\n                height=\"600px\"\n                center={mapCenter}\n                markers={mapMarkers}\n                onMapClick={handleMapClick}\n                data-testid=\"main-map\"\n              />\n            )}\n          </div>\n        </Card>\n\n        {/* Map Legend */}\n        <Card className=\"mt-4\">\n          <CardContent className=\"p-4\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">Legenda</h4>\n            <div className=\"flex flex-wrap gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-red-500 rounded-full\"></div>\n                <span className=\"text-sm text-gray-600\">Alta Prioridade</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-amber-500 rounded-full\"></div>\n                <span className=\"text-sm text-gray-600\">M√©dia Prioridade</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n                <span className=\"text-sm text-gray-600\">Baixa Prioridade</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sidebar */}\n      <div className=\"lg:w-80 space-y-6\">\n        {/* Quick Add */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <Button \n              className=\"w-full\" \n              onClick={() => onNewInspection()}\n              data-testid=\"button-adicionar-inspecao\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Adicionar Inspe√ß√£o\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Filtros</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">EA</Label>\n              <Select \n                value={filters.eaId || \"all\"} \n                onValueChange={(value) => setFilters(prev => ({ ...prev, eaId: value === \"all\" ? undefined : value }))}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"filter-map-ea\">\n                  <SelectValue placeholder=\"Todas as EAs\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as EAs</SelectItem>\n                  {eas?.map((ea) => (\n                    <SelectItem key={ea.id} value={ea.id}>\n                      {ea.nome} ({inspections.filter(i => i.eaId === ea.id).length})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Munic√≠pio</Label>\n              <Select \n                value={filters.municipioId || \"all\"} \n                onValueChange={(value) => setFilters(prev => ({ ...prev, municipioId: value === \"all\" ? undefined : value }))}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"filter-map-municipio\">\n                  <SelectValue placeholder=\"Todos os munic√≠pios\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os munic√≠pios</SelectItem>\n                  {municipios?.map((municipio) => (\n                    <SelectItem key={municipio.id} value={municipio.id}>\n                      {municipio.nome}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Prioridade</Label>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"alta-priority\"\n                    checked={filters.prioridade.alta}\n                    onCheckedChange={(checked) => \n                      setFilters(prev => ({ \n                        ...prev, \n                        prioridade: { ...prev.prioridade, alta: checked as boolean }\n                      }))\n                    }\n                    data-testid=\"checkbox-alta-prioridade\"\n                  />\n                  <Label htmlFor=\"alta-priority\" className=\"text-sm text-gray-600\">\n                    Alta ({currentStats.alta})\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"media-priority\"\n                    checked={filters.prioridade.media}\n                    onCheckedChange={(checked) => \n                      setFilters(prev => ({ \n                        ...prev, \n                        prioridade: { ...prev.prioridade, media: checked as boolean }\n                      }))\n                    }\n                    data-testid=\"checkbox-media-prioridade\"\n                  />\n                  <Label htmlFor=\"media-priority\" className=\"text-sm text-gray-600\">\n                    M√©dia ({currentStats.media})\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"baixa-priority\"\n                    checked={filters.prioridade.baixa}\n                    onCheckedChange={(checked) => \n                      setFilters(prev => ({ \n                        ...prev, \n                        prioridade: { ...prev.prioridade, baixa: checked as boolean }\n                      }))\n                    }\n                    data-testid=\"checkbox-baixa-prioridade\"\n                  />\n                  <Label htmlFor=\"baixa-priority\" className=\"text-sm text-gray-600\">\n                    Baixa ({currentStats.baixa})\n                  </Label>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Per√≠odo</Label>\n              <div className=\"space-y-2\">\n                <Input \n                  type=\"date\" \n                  placeholder=\"Data inicial\"\n                  value={filters.dataInicio || \"\"}\n                  onChange={(e) => setFilters(prev => ({ ...prev, dataInicio: e.target.value || undefined }))}\n                  data-testid=\"input-data-inicio-map\"\n                />\n                <Input \n                  type=\"date\" \n                  placeholder=\"Data final\"\n                  value={filters.dataFim || \"\"}\n                  onChange={(e) => setFilters(prev => ({ ...prev, dataFim: e.target.value || undefined }))}\n                  data-testid=\"input-data-fim-map\"\n                />\n              </div>\n            </div>\n\n            <div className=\"pt-2\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full\" \n                size=\"sm\"\n                onClick={clearFilters}\n                data-testid=\"button-limpar-filtros-mapa\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Limpar filtros\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Selected Point Details */}\n        {selectedInspection && (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle>Detalhes da Inspe√ß√£o</CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setSelectedInspection(null)}\n                data-testid=\"button-close-details\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {selectedInspection.fotoUrl && (\n                <img \n                  src={selectedInspection.fotoUrl} \n                  alt=\"Foto da √°rvore inspecionada\" \n                  className=\"w-full rounded-lg shadow-sm\"\n                  data-testid=\"img-selected-tree\"\n                />\n              )}\n              \n              <div>\n                <h4 className=\"font-semibold text-gray-900\">\n                  {selectedInspection.especieFinal || \"Esp√©cie n√£o identificada\"}\n                </h4>\n                {selectedInspection.especieConfiancaMedia && (\n                  <p className=\"text-sm text-gray-600\">\n                    Confian√ßa IA: {selectedInspection.especieConfiancaMedia.toFixed(0)}%\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-500\">Data</p>\n                  <p className=\"font-medium\">\n                    {new Date(selectedInspection.dataInspecao).toLocaleDateString(\"pt-BR\")}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-gray-500\">EA</p>\n                  <p className=\"font-medium\">{selectedInspection.ea.nome}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-500\">Munic√≠pio</p>\n                  <p className=\"font-medium\">{selectedInspection.municipio.nome}/SP</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-500\">Alimentador</p>\n                  <p className=\"font-medium font-mono\">{selectedInspection.alimentador.codigo}</p>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-gray-500 text-sm\">Endere√ßo</p>\n                <p className=\"font-medium\">\n                  {selectedInspection.endereco || \"Endere√ßo n√£o informado\"}\n                </p>\n              </div>\n              \n              <div>\n                <Badge variant={getPriorityColor(selectedInspection.prioridade) as any}>\n                  {getPriorityLabel(selectedInspection.prioridade)} Prioridade\n                </Badge>\n              </div>\n              \n              <div className=\"flex space-x-2 pt-4\">\n                <Button \n                  className=\"flex-1\" \n                  size=\"sm\"\n                  onClick={() => onEditInspection?.(selectedInspection)}\n                  data-testid=\"button-edit-selected\"\n                >\n                  <Edit className=\"w-4 h-4 mr-1\" />\n                  Editar\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"flex-1\" \n                  size=\"sm\"\n                  data-testid=\"button-view-more-selected\"\n                >\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  Ver Mais\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Summary Stats */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Resumo Atual</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Total vis√≠vel</span>\n                <span className=\"font-semibold text-gray-900\" data-testid=\"text-total-visible\">\n                  {currentStats.total}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-red-600\">Alta prioridade</span>\n                <span className=\"font-semibold text-red-600\" data-testid=\"text-alta-visible\">\n                  {currentStats.alta}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-amber-600\">M√©dia prioridade</span>\n                <span className=\"font-semibold text-amber-600\" data-testid=\"text-media-visible\">\n                  {currentStats.media}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-green-600\">Baixa prioridade</span>\n                <span className=\"font-semibold text-green-600\" data-testid=\"text-baixa-visible\">\n                  {currentStats.baixa}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18846},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\n// CSS imports removed - styles handled by Tailwind\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2834},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { Dashboard } from \"@/components/Dashboard\";\nimport { InspectionForm } from \"@/components/InspectionForm\";\nimport { InspectionsTable } from \"@/components/InspectionsTable\";\nimport { MapView } from \"@/components/MapView\";\n\ntype View = \"dashboard\" | \"inspection-form\" | \"inspections\" | \"map\" | \"reports\";\n\nexport default function Home() {\n  const [currentView, setCurrentView] = useState<View>(\"dashboard\");\n  const [inspectionFormData, setInspectionFormData] = useState<{\n    lat?: number;\n    lng?: number;\n  } | null>(null);\n\n  const handleNewInspection = (coordinates?: { lat: number; lng: number }) => {\n    setInspectionFormData(coordinates || null);\n    setCurrentView(\"inspection-form\");\n  };\n\n  const handleCloseInspectionForm = () => {\n    setInspectionFormData(null);\n    setCurrentView(\"dashboard\");\n  };\n\n  const handleShowInspections = () => {\n    setCurrentView(\"inspections\");\n  };\n\n  const handleShowMap = () => {\n    setCurrentView(\"map\");\n  };\n\n  const handleShowReports = () => {\n    setCurrentView(\"reports\");\n  };\n\n  const renderContent = () => {\n    switch (currentView) {\n      case \"dashboard\":\n        return (\n          <Dashboard\n            onNewInspection={handleNewInspection}\n            onShowMap={handleShowMap}\n            onShowReports={handleShowReports}\n          />\n        );\n      case \"inspection-form\":\n        return (\n          <InspectionForm\n            onClose={handleCloseInspectionForm}\n            initialData={inspectionFormData || undefined}\n          />\n        );\n      case \"inspections\":\n        return (\n          <InspectionsTable \n            onNewInspection={handleNewInspection}\n            onEditInspection={(inspection) => {\n              setInspectionFormData({ \n                lat: inspection.latitude, \n                lng: inspection.longitude \n              });\n              setCurrentView(\"inspection-form\");\n            }}\n          />\n        );\n      case \"map\":\n        return (\n          <MapView \n            onNewInspection={handleNewInspection}\n            onEditInspection={(inspection) => {\n              setInspectionFormData({ \n                lat: inspection.latitude, \n                lng: inspection.longitude \n              });\n              setCurrentView(\"inspection-form\");\n            }}\n          />\n        );\n      case \"reports\":\n        return (\n          <InspectionsTable \n            onNewInspection={handleNewInspection}\n            onEditInspection={(inspection) => {\n              setInspectionFormData({ \n                lat: inspection.latitude, \n                lng: inspection.longitude \n              });\n              setCurrentView(\"inspection-form\");\n            }}\n          />\n        );\n      default:\n        return (\n          <Dashboard\n            onNewInspection={handleNewInspection}\n            onShowMap={handleShowMap}\n            onShowReports={handleShowReports}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary-500 rounded-lg flex items-center justify-center\">\n                  <svg \n                    className=\"w-6 h-6 text-white\" \n                    fill=\"currentColor\" \n                    viewBox=\"0 0 20 20\"\n                    data-testid=\"logo-icon\"\n                  >\n                    <path fillRule=\"evenodd\" d=\"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H9a1 1 0 110 2H7.771l.062-.245L8.77 12zM11 12a1 1 0 110 2h-1.229l.062.245L10.771 15H11a1 1 0 110 2H9.229l.804.804A1 1 0 019.326 19H6.674a1 1 0 01-.707-1.196l.804-.804H5a3 3 0 01-3-3V5a3 3 0 013-3h10a3 3 0 013 3v8a3 3 0 01-3 3h-1.674a1 1 0 01-.707 1.196l.804.804A1 1 0 0112.326 19H9.674a1 1 0 01-.707-1.196L9.771 17H11z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">Arboriza√ß√£o Urbana</h1>\n                  <p className=\"text-sm text-gray-500\">Sistema de Gest√£o de Inspe√ß√µes</p>\n                </div>\n              </div>\n            </div>\n            \n            <nav className=\"hidden md:flex space-x-8\">\n              <button \n                onClick={() => setCurrentView(\"dashboard\")}\n                className={`nav-link flex items-center space-x-2 pb-2 border-b-2 transition-colors ${\n                  currentView === \"dashboard\" \n                    ? \"text-primary-600 border-primary-600\" \n                    : \"text-gray-600 hover:text-primary-600 border-transparent\"\n                }`}\n                data-testid=\"nav-dashboard\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n                  <path d=\"M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z\" />\n                </svg>\n                <span>Dashboard</span>\n              </button>\n              <button \n                onClick={() => setCurrentView(\"inspections\")}\n                className={`nav-link flex items-center space-x-2 pb-2 border-b-2 transition-colors ${\n                  currentView === \"inspections\" \n                    ? \"text-primary-600 border-primary-600\" \n                    : \"text-gray-600 hover:text-primary-600 border-transparent\"\n                }`}\n                data-testid=\"nav-inspections\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Inspe√ß√µes</span>\n              </button>\n              <button \n                onClick={() => setCurrentView(\"map\")}\n                className={`nav-link flex items-center space-x-2 pb-2 border-b-2 transition-colors ${\n                  currentView === \"map\" \n                    ? \"text-primary-600 border-primary-600\" \n                    : \"text-gray-600 hover:text-primary-600 border-transparent\"\n                }`}\n                data-testid=\"nav-map\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Mapa</span>\n              </button>\n              <button \n                onClick={() => setCurrentView(\"reports\")}\n                className={`nav-link flex items-center space-x-2 pb-2 border-b-2 transition-colors ${\n                  currentView === \"reports\" \n                    ? \"text-primary-600 border-primary-600\" \n                    : \"text-gray-600 hover:text-primary-600 border-transparent\"\n                }`}\n                data-testid=\"nav-reports\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Relat√≥rios</span>\n              </button>\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"p-2 text-gray-400 hover:text-gray-600 relative\" data-testid=\"button-notifications\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n                </svg>\n                <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                  3\n                </span>\n              </button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-primary-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <span className=\"text-sm font-medium text-gray-700\">Jo√£o Silva</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Navigation */}\n      <nav className=\"md:hidden bg-white border-t border-gray-200 fixed bottom-0 left-0 right-0 z-50\">\n        <div className=\"flex justify-around py-2\">\n          <button \n            onClick={() => setCurrentView(\"dashboard\")}\n            className={`nav-mobile-btn flex flex-col items-center py-2 px-1 transition-colors ${\n              currentView === \"dashboard\" ? \"text-primary-600\" : \"text-gray-400\"\n            }`}\n            data-testid=\"mobile-nav-dashboard\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n              <path d=\"M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z\" />\n            </svg>\n            <span className=\"text-xs mt-1\">Dashboard</span>\n          </button>\n          <button \n            onClick={() => setCurrentView(\"inspections\")}\n            className={`nav-mobile-btn flex flex-col items-center py-2 px-1 transition-colors ${\n              currentView === \"inspections\" ? \"text-primary-600\" : \"text-gray-400\"\n            }`}\n            data-testid=\"mobile-nav-inspections\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"text-xs mt-1\">Inspe√ß√µes</span>\n          </button>\n          <button \n            onClick={() => setCurrentView(\"map\")}\n            className={`nav-mobile-btn flex flex-col items-center py-2 px-1 transition-colors ${\n              currentView === \"map\" ? \"text-primary-600\" : \"text-gray-400\"\n            }`}\n            data-testid=\"mobile-nav-map\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"text-xs mt-1\">Mapa</span>\n          </button>\n          <button \n            onClick={() => setCurrentView(\"reports\")}\n            className={`nav-mobile-btn flex flex-col items-center py-2 px-1 transition-colors ${\n              currentView === \"reports\" ? \"text-primary-600\" : \"text-gray-400\"\n            }`}\n            data-testid=\"mobile-nav-reports\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"text-xs mt-1\">Relat√≥rios</span>\n          </button>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mb-20 md:mb-6\">\n        {renderContent()}\n      </main>\n\n      {/* Floating Action Button for Mobile */}\n      {currentView !== \"inspection-form\" && (\n        <button \n          className=\"fixed bottom-20 right-6 md:hidden w-14 h-14 bg-primary-500 hover:bg-primary-600 rounded-full shadow-lg flex items-center justify-center text-white transition-colors z-40\"\n          onClick={() => handleNewInspection()}\n          data-testid=\"fab-nova-inspecao\"\n        >\n          <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clipRule=\"evenodd\" />\n          </svg>\n        </button>\n      )}\n    </div>\n  );\n}\n","size_bytes":12788},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/lib/supabaseAdmin.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE;\n\nif (!supabaseUrl || !supabaseServiceRoleKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false\n  }\n});","size_bytes":432},"server/routes/ia.ts":{"content":"import { Router } from \"express\";\nimport axios from \"axios\";\n\nconst router = Router();\n\n/**\n * POST /api/ia/identificar-especie\n * Body: { inspecao_id: string, organs?: string[], lang?: string }\n * - Busca a foto no Object Storage\n * - Chama a Pl@ntNet API e devolve candidatos\n * - N√ÉO exp√µe a API key no frontend\n */\nrouter.post(\"/identificar-especie\", async (req, res) => {\n  try {\n    const { inspecao_id, organs = [\"leaf\",\"flower\",\"fruit\",\"bark\",\"habit\"], lang = \"pt\" } = req.body || {};\n    if (!inspecao_id) return res.status(400).json({ error: \"inspecao_id √© obrigat√≥rio\" });\n    if (!process.env.PLANTNET_API_KEY) return res.status(500).json({ error: \"PLANTNET_API_KEY n√£o configurada\" });\n\n    // Para este projeto, vamos usar a foto que foi enviada diretamente\n    // j√° que n√£o temos Supabase configurado ainda, vamos adaptar para o fluxo atual\n    const { imageUrl } = req.body;\n    if (!imageUrl) {\n      return res.status(400).json({ error: \"imageUrl √© obrigat√≥ria\" });\n    }\n\n    // Montar chamada √† Pl@ntNet\n    const params = new URLSearchParams();\n    params.append(\"api-key\", process.env.PLANTNET_API_KEY as string);\n    params.append(\"images\", imageUrl);\n    // m√∫ltiplos √≥rg√£os ajudam a precis√£o; envie todos os selecionados\n    organs.forEach((o: string) => params.append(\"organs\", o));\n    params.append(\"lang\", lang);\n    params.append(\"include-related-images\", \"false\");\n    params.append(\"no-reject\", \"false\");\n\n    const url = `https://my-api.plantnet.org/v2/identify/all?${params.toString()}`;\n    const { data } = await axios.get(url, { timeout: 20000 });\n\n    const candidatos = (data?.results || []).map((r: any) => ({\n      nome_cientifico: r?.species?.scientificName || r?.species?.scientificNameWithoutAuthor || null,\n      nome_comum: r?.species?.commonNames?.[0] || null,\n      confianca: Math.round((r?.score || 0) * 100),\n    }));\n\n    // calcular confian√ßa m√©dia s√≥ dos top 5\n    const top = candidatos.slice(0, 5);\n    const confianca_media = top.length\n      ? Math.round(top.reduce((acc, c) => acc + (c.confianca || 0), 0) / top.length)\n      : null;\n\n    // N√ÉO salvamos direto; devolvemos para o front decidir/confirmar\n    return res.json({\n      especie_sugerida: candidatos[0]?.nome_cientifico || null,\n      candidatos,\n      confianca_media,\n      fonte: \"Pl@ntNet\",\n    });\n  } catch (e: any) {\n    const detail = e?.response?.data || e?.message || \"Erro desconhecido\";\n    const status = e?.response?.status || 500;\n    console.error(\"Erro na identifica√ß√£o Pl@ntNet:\", { error: e, detail, status });\n    return res.status(status).json({ error: \"Falha na identifica√ß√£o (Pl@ntNet)\", detail });\n  }\n});\n\nexport default router;","size_bytes":2697},"client/src/services/ia.ts":{"content":"// src/services/ia.ts\n// PlantNet API service\nexport async function identificarEspecie(\n  imageUrl: string, \n  organs: string[] = [\"leaf\",\"flower\",\"fruit\",\"bark\",\"habit\"]\n) {\n  const resp = await fetch(\"/api/ia/identificar-especie\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ imageUrl, organs, lang: \"pt\" }),\n  });\n  if (!resp.ok) {\n    const err = await resp.json().catch(() => ({}));\n    throw new Error(err?.error || \"Falha ao identificar esp√©cie\");\n  }\n  return resp.json();\n}","size_bytes":540},"client/src/components/ArvoreItem.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MapPin, Trash2, Upload, Brain, Map } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { MapComponent } from \"./MapComponent\";\n\ninterface ArvoreFoto {\n  id?: string;\n  url: string;\n}\n\ninterface ArvoreItemProps {\n  index: number;\n  arvore: {\n    latitude: number | undefined;\n    longitude: number | undefined;\n    endereco?: string;\n    observacao?: string;\n    especieFinal?: string;\n    especieConfiancaMedia?: number;\n    fotos: ArvoreFoto[];\n  };\n  onUpdate: (index: number, updates: Partial<ArvoreItemProps['arvore']>) => void;\n  onRemove: (index: number) => void;\n  onPhotoAdded?: (index: number, photoUrl: string) => void;\n  form?: any; // React Hook Form instance\n  fieldName?: string; // Field name prefix for form fields\n}\n\nexport function ArvoreItem({ \n  index, \n  arvore, \n  onUpdate, \n  onRemove,\n  onPhotoAdded,\n  form,\n  fieldName = \"arvores\"\n}: ArvoreItemProps) {\n  const [isCollapsed, setIsCollapsed] = useState(index > 0);\n  const [newPhotoFile, setNewPhotoFile] = useState<File | null>(null);\n  const [showMap, setShowMap] = useState(false);\n  const [tempCoords, setTempCoords] = useState({ lat: arvore.latitude ?? Number.NaN, lng: arvore.longitude ?? Number.NaN });\n\n\n  // Sincronizar coordenadas tempor√°rias apenas quando o mapa abre pela primeira vez\n  useEffect(() => {\n    if (showMap) {\n      setTempCoords({ lat: arvore.latitude ?? Number.NaN, lng: arvore.longitude ?? Number.NaN });\n    }\n  }, [showMap]);\n\n  async function fetchAddressForCoordinates(lat: number, lng: number) {\n    try {\n      const response = await fetch(`/api/geocoding/reverse?lat=${lat}&lng=${lng}`);\n      if (response.ok) {\n        const data = await response.json();\n        onUpdate(index, { endereco: data.endereco });\n      }\n    } catch (error) {\n      console.error(\"Erro ao buscar endere√ßo:\", error);\n    }\n  }\n  // registra campos no RHF para watch()/setValue funcionarem\n  useEffect(() => {\n    if (!form) return;\n    form.register(`${fieldName}.${index}.latitude`);\n    form.register(`${fieldName}.${index}.longitude`);\n    form.register(`${fieldName}.${index}.observacao`);\n  }, [form, fieldName, index]);\n\n  // hidrata o RHF com os valores atuais de 'arvore' quando ainda n√£o h√° valor\n  useEffect(() => {\n    if (!form) return;\n    const latPath = `${fieldName}.${index}.latitude`;\n    const lngPath = `${fieldName}.${index}.longitude`;\n    const obsPath = `${fieldName}.${index}.observacao`;\n\n    if (form.getValues(latPath) == null && arvore.latitude != null) {\n      form.setValue(latPath, arvore.latitude, { shouldDirty: false, shouldValidate: false });\n    }\n    if (form.getValues(lngPath) == null && arvore.longitude != null) {\n      form.setValue(lngPath, arvore.longitude, { shouldDirty: false, shouldValidate: false });\n    }\n    if (form.getValues(obsPath) == null && arvore.observacao != null) {\n      form.setValue(obsPath, arvore.observacao, { shouldDirty: false, shouldValidate: false });\n    }\n  }, [form, fieldName, index, arvore.latitude, arvore.longitude, arvore.observacao]);\n\n  function useDebouncedEffect(fn: () => void, deps: any[], delay: number) {\n    useEffect(() => {\n      const id = setTimeout(fn, delay);\n      return () => clearTimeout(id);\n    }, deps);\n  }\n  \n    const obsWatch = form?.watch(`${fieldName}.${index}.observacao`);\n\n  useDebouncedEffect(() => {\n    const updates: Partial<typeof arvore> = {};\n    if (obsWatch !== undefined && obsWatch !== arvore.observacao) {\n      updates.observacao = obsWatch;\n    }\n    if (Object.keys(updates).length) onUpdate(index, updates);\n  }, [obsWatch], 250);\n\n\n  \n  const handleLocationFromGPS = () => {\n    if (!navigator.geolocation) {\n      toast({ title: \"Geolocaliza√ß√£o n√£o suportada\", description: \"Seu navegador n√£o suporta geolocaliza√ß√£o\", variant: \"destructive\" });\n      return;\n    }\n    \n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const newLat = Number(position.coords.latitude.toFixed(6));\n        const newLng = Number(position.coords.longitude.toFixed(6));\n        \n        // Update form values\n        if (form) {\n          form.setValue(`${fieldName}.${index}.latitude`, newLat, { shouldDirty: true, shouldValidate: true });\n          form.setValue(`${fieldName}.${index}.longitude`, newLng, { shouldDirty: true, shouldValidate: true });\n        }\n        \n        // Update component state\n        onUpdate(index, { latitude: newLat, longitude: newLng });\n        \n        // Show success message\n        toast({ title: \"Localiza√ß√£o obtida\", description: `Coordenadas atualizadas: ${newLat}, ${newLng}` });\n        \n        // Fetch address for coordinates\n        fetchAddressForCoordinates(newLat, newLng);\n      },\n      () => {\n        toast({\n          title: \"Erro de localiza√ß√£o\",\n          description: \"N√£o foi poss√≠vel obter sua localiza√ß√£o. Verifique as permiss√µes do navegador.\",\n          variant: \"destructive\",\n        });\n      }\n    );\n  };\n\n\n  const handleMarkerDrag = (lat: number, lng: number) => {\n    setTempCoords({ lat, lng });\n    // N√£o atualiza as coordenadas reais imediatamente para evitar re-renderiza√ß√£o do dialog\n  };\n\n  const applyTempCoords = () => {\n    const latToApply = Number.isFinite(tempCoords.lat) ? tempCoords.lat : arvore.latitude;\n    const lngToApply = Number.isFinite(tempCoords.lng) ? tempCoords.lng : arvore.longitude;\n    form?.setValue(`${fieldName}.${index}.latitude`, latToApply, { shouldDirty: true, shouldValidate: true });\n    form?.setValue(`${fieldName}.${index}.longitude`, lngToApply, { shouldDirty: true, shouldValidate: true });\n    onUpdate(index, { latitude: latToApply, longitude: lngToApply });\n    if (latToApply && lngToApply) {\n      fetchAddressForCoordinates(latToApply, lngToApply);\n    }\n\n    \n    setShowMap(false);\n  };\n\n\n  const handlePhotoUpload = async () => {\n    if (!newPhotoFile) return;\n    \n    // Create a proper URL from the file for API calls\n    const photoUrl = URL.createObjectURL(newPhotoFile);\n    const updatedFotos = [...arvore.fotos, { url: photoUrl }];\n    onUpdate(index, { fotos: updatedFotos });\n    setNewPhotoFile(null);\n    \n    toast({\n      title: \"Foto adicionada\",\n      description: \"Identificando esp√©cie automaticamente...\"\n    });\n\n    // Trigger automatic species identification\n    if (onPhotoAdded) {\n      onPhotoAdded(index, photoUrl);\n    }\n  };\n\n  const removePhoto = (photoIndex: number) => {\n    const updatedFotos = arvore.fotos.filter((_, i) => i !== photoIndex);\n    onUpdate(index, { fotos: updatedFotos });\n  };\n\n  const canIdentifySpecies = arvore.fotos.length > 0;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"cursor-pointer\" onClick={() => setIsCollapsed(!isCollapsed)}>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <MapPin className=\"w-5 h-5\" />\n            <span>√Årvore {index + 1}</span>\n            {arvore.especieFinal && (\n              <span className=\"text-sm font-normal text-gray-600\">\n                - {arvore.especieFinal}\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs text-gray-500\">\n              {arvore.fotos.length} foto(s)\n            </span>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onRemove(index);\n              }}\n              data-testid={`button-remove-arvore-${index}`}\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      {!isCollapsed && (\n        <CardContent className=\"space-y-4\">\n          {/* GPS Coordinates Section */}\n          <div className=\"border rounded-lg p-4 bg-gray-50\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-sm font-medium text-gray-900\">Coordenadas GPS da √Årvore</h4>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleLocationFromGPS}\n                data-testid={`button-gps-${index}`}\n              >\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                Usar GPS\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Latitude *</Label>\n                <Input\n                  type=\"number\"\n                  step=\"any\"\n                  placeholder=\"Ex: -23.550520\"\n                  value={arvore.latitude || \"\"}\n                  onChange={(e) => {\n                    const value = e.target.value ? parseFloat(e.target.value) : undefined;\n                    if (form) {\n                      form.setValue(`${fieldName}.${index}.latitude`, value, { shouldDirty: true, shouldValidate: true });\n                    }\n                    onUpdate(index, { latitude: value });\n                  }}\n                  data-testid={`input-latitude-${index}`}\n                />\n              </div>\n\n              <div>\n                <Label>Longitude *</Label>\n                <Input\n                  type=\"number\"\n                  step=\"any\"\n                  placeholder=\"Ex: -47.295757\"\n                  value={arvore.longitude || \"\"}\n                  onChange={(e) => {\n                    const value = e.target.value ? parseFloat(e.target.value) : undefined;\n                    if (form) {\n                      form.setValue(`${fieldName}.${index}.longitude`, value, { shouldDirty: true, shouldValidate: true });\n                    }\n                    onUpdate(index, { longitude: value });\n                  }}\n                  data-testid={`input-longitude-${index}`}\n                />\n              </div>\n            </div>\n\n            {arvore.latitude && arvore.longitude && (\n              <div className=\"mt-3 p-3 bg-green-50 border border-green-200 rounded-md\">\n                <p className=\"text-sm text-green-800\">\n                  <MapPin className=\"w-4 h-4 inline mr-1\" />\n                  Coordenadas: {arvore.latitude.toFixed(6)}, {arvore.longitude.toFixed(6)}\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Map button */}\n          <div className=\"flex space-x-2\">\n            <Dialog open={showMap} onOpenChange={setShowMap}>\n              <DialogTrigger asChild>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  data-testid={`button-map-${index}`}\n                >\n                  <Map className=\"w-4 h-4 mr-2\" />\n                  Ajustar no mapa\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl\">\n                <DialogHeader>\n                  <DialogTitle>Ajustar Posi√ß√£o da √Årvore {index + 1}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Latitude</Label>\n                      <Input\n                        type=\"number\"\n                        step=\"any\"\n                        inputMode=\"decimal\"\n                        value={Number.isFinite(tempCoords.lat) ? tempCoords.lat : \"\"}\n                        onChange={(e) => setTempCoords((c) => ({ ...c, lat: e.target.value === \"\" ? Number.NaN : Number(e.target.value) }))}\n                      />\n                    </div>\n                    <div>\n                      <Label>Longitude</Label>\n                      <Input\n                        type=\"number\"\n                        step=\"any\"\n                        inputMode=\"decimal\"\n                        value={Number.isFinite(tempCoords.lng) ? tempCoords.lng : \"\"}\n                        onChange={(e) => setTempCoords((c) => ({ ...c, lng: e.target.value === \"\" ? Number.NaN : Number(e.target.value) }))}\n                      />\n                    </div>\n                  </div>\n                  <MapComponent\n                    height=\"400px\"\n                    center={[\n                      Number.isFinite(tempCoords.lat) ? tempCoords.lat : (arvore.latitude ?? -23.2109),\n                      Number.isFinite(tempCoords.lng) ? tempCoords.lng : (arvore.longitude ?? -47.2957),\n                    ]}\n                    draggableMarker={{\n                      lat: Number.isFinite(tempCoords.lat) ? tempCoords.lat : (arvore.latitude ?? -23.2109),\n                      lng: Number.isFinite(tempCoords.lng) ? tempCoords.lng : (arvore.longitude ?? -47.2957),\n                      onDrag: handleMarkerDrag,\n                    }}\n                  />\n                  <p className=\"text-sm text-gray-600\">\n                    Arraste o marcador para ajustar a posi√ß√£o exata da √°rvore.\n                  </p>\n                  <div className=\"flex justify-end gap-2 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setTempCoords({ lat: arvore.latitude ?? Number.NaN, lng: arvore.longitude ?? Number.NaN });\n                        setShowMap(false);\n                      }}\n                      data-testid={`button-cancel-map-${index}`}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={applyTempCoords}\n                      data-testid={`button-apply-map-${index}`}\n                    >\n                      Aplicar\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n\n          {/* Address */}\n          <div>\n            <Label>Endere√ßo</Label>\n            <Input\n              value={arvore.endereco || \"\"}\n              onChange={(e) => onUpdate(index, { endereco: e.target.value })}\n              placeholder=\"Endere√ßo ser√° preenchido automaticamente\"\n              data-testid={`input-endereco-${index}`}\n            />\n          </div>\n\n          {/* Observation */}\n          <div>\n            <Label>Observa√ß√£o</Label>\n            <Textarea\n              value={(form?.watch(`${fieldName}.${index}.observacao`) ?? arvore.observacao) ?? \"\"}\n              onChange={(e) => {\n                form?.setValue(`${fieldName}.${index}.observacao`, e.target.value, { shouldDirty: true });\n              }}\n              placeholder=\"Observa√ß√µes sobre esta √°rvore\"\n              data-testid={`textarea-observacao-${index}`}\n            />\n          </div>\n\n          {/* Photos */}\n          <div>\n            <Label>Fotos da √Årvore</Label>\n            \n            {arvore.fotos.length > 0 && (\n              <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                {arvore.fotos.map((foto, photoIndex) => (\n                  <div key={photoIndex} className=\"relative\">\n                    <img\n                      src={foto.url}\n                      alt={`Foto ${photoIndex + 1}`}\n                      className=\"w-full h-24 object-cover rounded\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute top-1 right-1 p-1\"\n                      onClick={() => removePhoto(photoIndex)}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            <div className=\"flex items-center space-x-2 mt-2\">\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => setNewPhotoFile(e.target.files?.[0] || null)}\n                data-testid={`input-photo-${index}`}\n              />\n              <Button\n                type=\"button\"\n                onClick={handlePhotoUpload}\n                disabled={!newPhotoFile}\n                data-testid={`button-upload-photo-${index}`}\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Adicionar\n              </Button>\n            </div>\n          </div>\n\n          {/* Species identification */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label>Esp√©cie Identificada</Label>\n            </div>\n            \n            <Input\n              value={arvore.especieFinal || \"\"}\n              onChange={(e) => onUpdate(index, { especieFinal: e.target.value })}\n              placeholder=\"Esp√©cie identificada ou corrigida manualmente\"\n              data-testid={`input-especie-${index}`}\n            />\n            \n            {arvore.especieConfiancaMedia && (\n              <p className=\"text-sm text-gray-600\">\n                Confian√ßa: {arvore.especieConfiancaMedia.toFixed(0)}% (PlantNet)\n              </p>\n            )}\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}","size_bytes":17675},"client/src/components/ArvoresFieldArray.tsx":{"content":"import { useFieldArray, Control } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus } from \"lucide-react\";\nimport { ArvoreItem } from \"./ArvoreItem\";\n\ninterface ArvoreFoto {\n  id?: string;\n  url: string;\n}\n\ninterface ArvoreData {\n  latitude: number | undefined;\n  longitude: number | undefined;\n  endereco?: string;\n  observacao?: string;\n  especieFinal?: string;\n  especieConfiancaMedia?: number;\n  fotos: ArvoreFoto[];\n}\n\ninterface ArvoresFieldArrayProps {\n  control: Control<any>;\n  name: string;\n  form: any; // React Hook Form instance\n  onPhotoAdded?: (index: number, photoUrl: string) => void;\n}\n\nexport function ArvoresFieldArray({ \n  control, \n  name, \n  form,\n  onPhotoAdded\n}: ArvoresFieldArrayProps) {\n  const { fields, append, remove, update } = useFieldArray({\n    control,\n    name,\n  });\n\n  const addArvore = () => {\n    const newArvore: ArvoreData = {\n      latitude: undefined,\n      longitude: undefined,\n      endereco: \"\",\n      observacao: \"\",\n      especieFinal: \"\",\n      especieConfiancaMedia: undefined,\n      fotos: []\n    };\n    append(newArvore);\n  };\n\n  const updateArvore = (index: number, updates: Partial<ArvoreData>) => {\n    if (!updates || Object.keys(updates).length === 0) return;\n    \n    console.log(`updateArvore chamado:`, { index, updates });\n    \n    // For√ßa re-renderiza√ß√£o\n    update(index, { ...fields[index], ...updates } as any);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>√Årvores desta Nota</span>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm font-normal text-gray-600\">\n              {fields.length} √°rvore(s) adicionada(s)\n            </span>\n            <Button\n              type=\"button\"\n              onClick={addArvore}\n              data-testid=\"button-add-arvore\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Adicionar √°rvore\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {fields.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>Nenhuma √°rvore adicionada ainda.</p>\n            <p className=\"text-sm\">Clique em \"Adicionar √°rvore\" para come√ßar.</p>\n          </div>\n        ) : (\n          fields.map((field, index) => (\n            <ArvoreItem\n              key={field.id}\n              index={index}\n              arvore={field as unknown as ArvoreData}\n              onUpdate={updateArvore}\n              onRemove={remove}\n              onPhotoAdded={onPhotoAdded}\n              form={form}\n              fieldName={name}\n            />\n          ))\n        )}\n        \n        {fields.length > 0 && (\n          <div className=\"text-center\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={addArvore}\n              data-testid=\"button-add-arvore-bottom\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Adicionar outra √°rvore\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3285}},"version":1}